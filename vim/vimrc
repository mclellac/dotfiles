"------------------------------------------------------------------------------"
"
"                   ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"                   ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"                   ██║   ██║██║██╔████╔██║██████╔╝██║     
"                   ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║     
"                ██╗ ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"                ╚═╝  ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝                                          
"         
"------------------------------------------------------------------------------"
" Leader key to add extra key combinations
let mapleader = ','
let g:mapleader = ','

" Time delay on <Leader> key
set timeoutlen=3000 ttimeoutlen=100

"------------------------------------------------------------------------------"
"                               Plugins
"------------------------------------------------------------------------------"
" Enable nocompatible
if has('vim_starting')
    if &compatible
        set nocompatible
    endif
endif

filetype off
" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')
    " Languages
    Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    Plug 'sheerun/vim-polyglot'
    " Colorschemes & Icons
    Plug 'ryanoasis/vim-devicons'
    Plug 'lifepillar/vim-solarized8'    " colorscheme
    Plug 'romainl/flattened'            " colorscheme
    Plug 'mhartington/oceanic-next'     " using for airline theme
    Plug 'jacoborus/tender'
    " Statusbar
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " Deoplete plugins
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
    let g:deoplete#enable_at_startup = 1
    " Git tools
    Plug 'airblade/vim-gitgutter'
    Plug 'tpope/vim-fugitive'
    Plug 'junegunn/gv.vim'
    " Tools
    Plug 'majutsushi/tagbar'
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'tpope/vim-endwise'
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-surround'
    Plug 'Yggdroot/indentLine'
    Plug 'w0rp/ale'
call plug#end()

"------------------------------------------------------------------------------"
"                               UI Settings
"------------------------------------------------------------------------------"
if has("gui_running")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h14
   endif
endif

" Enable truecolors
if (has("termguicolors"))
    set termguicolors
endif

" Solarized
let g:solarized_degrade = 0
let g:solarized_termtrans = 1
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italics = 0
let g:solarized_contrast = 'normal'
let g:solarized_visibility = 'high'

syntax enable
set background=dark
try
    colorscheme solarized8
catch
    colorscheme default
endtry

" Airline settings
let g:airline_powerline_fonts = 0
let g:airline_theme='oceanicnext'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" Custom styling
set fillchars+=vert:│                               " Vertical split bar
highlight VertSplit ctermbg=NONE guibg=NONE
highlight Normal ctermbg=NONE                       " Text colors
highlight Comment ctermbg=NONE
highlight nonText ctermbg=NONE
highlight Visual cterm=bold ctermbg=6 ctermfg=000   " Visual select UI colors
highlight Terminal ctermbg=000 ctermfg=15           " terminal UI
highlight SignColumn ctermbg=002                    " vim-gitgutter UI settings

"------------------------------------------------------------------------------"
"                                Terminal
"------------------------------------------------------------------------------"

" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

if has('nvim')
    fu! OpenTerminal()
        " open split windows on the topleft
        topleft split
        " resize the height of terminal windows to 30
        resize 30
        :terminal
    endf
else
    fu! OpenTerminal()
        " open split windows on the topleft
        topleft split
        " resize the height of terminal windows to 30
        resize 15
        :call term_start('zsh', {'curwin' : 1, 'term_finish' : 'close'})
    endf
endif
nnoremap <silent> <Leader>t :call OpenTerminal()<cr>

" NERDTree settings.
let g:NERDTreeWinPos = "left"
let NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

map <C-n> :NERDTreeToggle<CR> " bind ctrl+n to open/close nerdtree.

" Close Vim if NERDtree is the only open window.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&  b:NERDTreeType == "primary") | q | endif

" Open nerdtree automatically if no files were specified to be opened
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

let NERDTreeQuitOnOpen=1 " Close nerdtree after opening a file with nerdtree

autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

"------------------------------------------------------------------------------"
"                           Plugins: Autocomplete
"------------------------------------------------------------------------------"
" SuperTab settings
let g:SuperTabDefaultCompletionType = '<TAB>'

" Deoplete settings
" Deoplete requires Neovim with Python3 enabled
let g:python3_host_prog       = '/usr/local/bin/python3'
let g:python3_host_skip_check = 1

autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
let g:deoplete#enable_smart_case = 1
let g:deoplete#omni#functions    = {}

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Python autocompletion
let g:deoplete#sources#jedi#show_docstring = 1

" Go autocompletion
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class    = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#use_cache     = 1

" Javascript autocompletion
let g:deoplete#omni#functions.javascript = [
    \ 'tern#Complete',
    \ 'jspc#omni',
\ ]

" Clang autocompletion
let g:clang_complete_auto              = 0
let g:clang_auto_select                = 0
let g:clang_omnicppcomplete_compliance = 0
let g:clang_make_default_keymappings   = 0
let g:clang_use_library                = 1
let g:clang_library_path               = '/usr/local/opt/llvm/lib'

set completeopt-=preview " Disable documentation window
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>" " auto-insert

"------------------------------------------------------------------------------"
"                         Plugins: Git tools
"------------------------------------------------------------------------------"
" Gitgutter settings
let g:gitgutter_max_signs             = 5000
let g:gitgutter_sign_added            = '⊕'
let g:gitgutter_sign_modified         = '⊖'
let g:gitgutter_sign_removed          = '⊗'
let g:gitgutter_sign_modified_removed = '⊜'
let g:gitgutter_map_keys              = 0
let g:gitgutter_diff_args             = '--ignore-space-at-eol'

nmap <Leader>j <Plug>GitGutterNextHunkzz
nmap <Leader>k <Plug>GitGutterPrevHunkzz
nnoremap <silent> <C-g> :call <SID>ToggleGGPrev()<CR>zz
nnoremap <Leader>gs :GitGutterStageHunk<CR>
nnoremap <Leader>gu :GitGutterUndoHunk<CR>


" IndentLine settings
let g:indentLine_char = ' '
"let g:indentLine_color_term = 235

" Reload vim config on changes.
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

"------------------------------------------------------------------------------"
"                               General settings
"------------------------------------------------------------------------------"
set ttyfast 					" send more characters for redraws
set showmatch					" speed up bracket matching speed
set matchtime=2

set t_Co=256 " https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting

set mouse=a                   " enable mouse use in all modes
set cursorline                " highlight curor line
set nocursorcolumn
set hidden
set noautowrite               " don't automagically write on :next
set lazyredraw                " don't redraw when don't have to
set showmode
set showcmd
set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set history=10000
set backspace=indent,eol,start
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion
set noerrorbells              " no error bells please
set novisualbell              " no vusual bell either, please.
set shell=zsh
set fileformats=unix
set ff=unix
set wildmode=longest:full
set wildmenu                  " menu has tab completion
set laststatus=2
set nowrap
set more                      " use more prompt
set autoread                  " watch for file changes
set ruler laststatus=2 showcmd showmode   " show the line number on the bar
"set list listchars=trail:»,tab:»-
set wrap breakindent
set encoding=utf-8
"set number
set title

" Searching
set incsearch                 " incremental search
set ignorecase                " search ignoring case
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set diffopt=filler,iwhite     " ignore all whitespace and sync

" Backup
set backup
set backupdir=~/.vim/backup

" Filetype-Specific Configurations
if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " disable auto comment insertion
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Makefiles
    autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab

    " HTML, XML, Jinja
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType xml setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType htmldjango inoremap {{ {{  }}<left><left><left>
    autocmd FileType htmldjango inoremap {% {%  %}<left><left><left>
    autocmd FileType htmldjango inoremap {# {#  #}<left><left><left>

    " Markdown and Journal
    autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType journal setlocal shiftwidth=2 tabstop=2 softtabstop=2
endif

" For everything else, use a tab width of 4 space col.
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab smarttab

" Spelling
if v:version >= 700
    " Enable spell check for text files
    autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

" Define command history
let &viminfo='%,h,"4,''4,f0,/99,:' . &history 
"             | |  |   |  |  |       +command-line history saved 
"             | |  |   |  |  +search history saved 
"             | |  |   |  +marks 0-9,A-Z 0=NOT saved 
"             | |  |   +files saved for marks 
"             | |  +lines saved each register (old name for <, vi6.2) 
"             | +disable 'hlsearch' loading viminfo 
"             +save/restore buffer list 


" MatchTagAlways settings
let g:mta_filetypes = {
	\ 'html'  : 1,
	\ 'xhtml' : 1,
	\ 'xml'   : 1,
	\ 'jinja' : 1,
	\ 'php'   : 1,
	\ }

" Misc 
" Vim-tmux navigator settings
let g:tmux_navigator_no_mappings = 1

" Instant markdown settings
let g:instant_markdown_autostart = 0

nnoremap <Leader>im :InstantMarkdownPreview<CR>

"------------------------------------------------------------------------------"
"                                Languages
"------------------------------------------------------------------------------"
" ALE settings
let g:ale_linters = {
    \ 'python'     : ['pylint'],
    \ 'javascript' : ['eslint'],
\}

" :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
    \ 'javascript': ['eslint'],
\}

" Navigate between errors
nnoremap <Leader>h :lprevious<CR>zz
nnoremap <Leader>l :lnext<CR>zz

let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1 " Enable completion where available.
let g:airline#extensions#ale#enabled = 1 " Set this. Airline will handle the rest.

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline=%{LinterStatus()}

" Python Settings
" python autocomplete settings required jedi package
" $ pip install jedi 
let g:completor_python_binary = '/usr/local/bin/python3.6'

" Ansible plugin options
let g:ansible_options = {'ignore_blank_lines': 0}
let g:ansible_extra_keywords_highlight = 1
let g:ansible_template_syntaxes = 1

" Go settings
let g:go_highlight_functions         = 1
let g:go_highlight_methods           = 1
let g:go_highlight_fields            = 1
let g:go_highlight_types             = 1
let g:go_highlight_operators         = 1
let g:go_highlight_build_constraints = 1
let g:go_bin_path                    = expand('~/Projects/bin')
let g:go_list_type                   = 'quickfix'

" CSS3 settings
augroup VimCSS3Syntax
	autocmd!
	autocmd FileType css setlocal iskeyword+=-
augroup END

" Javascript settings
autocmd FileType javascript set formatprg=prettier\ --stdin
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow  = 1

" Tern_for_vim settings
let g:tern#command   = ['tern']
let g:tern#arguments = ['--persistent']

" JS-Beautify
let g:config_Beautifier = {}
let g:config_Beautifier['js'] = {}
let g:config_Beautifier['js'].indent_style = 'tab'
let g:config_Beautifier['jsx'] = {}
let g:config_Beautifier['jsx'].indent_style = 'tab'
let g:config_Beautifier['json'] = {}
let g:config_Beautifier['json'].indent_style = 'tab'
let g:config_Beautifier['css'] = {}
let g:config_Beautifier['css'].indent_style = 'tab'
let g:config_Beautifier['html'] = {}
let g:config_Beautifier['html'].indent_style = 'tab'

augroup beautify
	autocmd!
    autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
    autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
    autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
    autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
    autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
	autocmd FileType javascript nnoremap <buffer> <Leader>bf :call JsBeautify()<cr>
	autocmd FileType javascript vnoremap <buffer> <Leader>bf :call RangeJsBeautify()<cr>
	autocmd FileType json nnoremap <buffer> <Leader>bf :call JsonBeautify()<cr>
	autocmd FileType json vnoremap <buffer> <Leader>bf :call RangeJsonBeautify()<cr>
	autocmd FileType jsx nnoremap <buffer> <Leader>bf :call JsxBeautify()<cr>
	autocmd FileType jsx vnoremap <buffer> <Leader>bf :call RangeJsxBeautify()<cr>
	autocmd FileType html nnoremap <buffer> <Leader>bf :call HtmlBeautify()<cr>
	autocmd FileType html vnoremap <buffer> <Leader>bf :call RangeHtmlBeautify()<cr>
	autocmd FileType css nnoremap <buffer> <Leader>bf :call CSSBeautify()<cr>
    autocmd FileType css vnoremap <buffer> <Leader>bf :call RangeCSSBeautify()<cr>
augroup end

" Tagbar Settings
"------------------------------------------------------------------------------"
nmap <C-t> :TagbarToggle<CR>

" gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

"------------------------------------------------------------------------------"
"                                Misc. Mappings
"------------------------------------------------------------------------------"
nmap <Leader>tl :set list!<cr>         " toggle list mode
nmap <Leader>pp :set paste!<cr>        " toggle paste mode
nnoremap <Leader>bw :lcd %:p:h<CR>:pwd<CR>  " Switch CWD to the directory of the current buffer

" Split window settings
nnoremap <C-J> <C-W><C-J> " Remap CTRL+W then J to just CTRL+J
nnoremap <C-K> <C-W><C-K> 
nnoremap <C-L> <C-W><C-L> 
nnoremap <C-H> <C-W><C-H> 

" Open new split panes to right and bottom, which feels more natural than Vim’s default:
"set splitbelow
"set splitright
