"------------------------------------------------------------------------------"
"
"                   ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"                   ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"                   ██║   ██║██║██╔████╔██║██████╔╝██║
"                   ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"                ██╗ ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"                ╚═╝  ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"
"------------------------------------------------------------------------------"
" Time delay on <Leader> key
set timeoutlen=500 ttimeoutlen=100

"------------------------------------------------------------------------------"
" Plugins
"------------------------------------------------------------------------------"
" Run Below Curl command in a terminal to install vimplug. Works for vim on
" Unix Systems
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"------------------------------------------------------------------------------"
if has('vim_starting')
    if &compatible
        set nocompatible
    endif
endif

filetype off
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
"------------------------------------------------------------------------------"
" Editor Plugins
"------------------------------------------------------------------------------"
""""""""""""""""""""""""""""
"       Start Screen       "
""""""""""""""""""""""""""""
Plug 'mhinz/vim-startify'

""""""""""""""""""""""""""""
"         Surround         "
""""""""""""""""""""""""""""
" This plugin has fucked up Keybindings but it's useful
" ysiw" surrounds one word with the " sign
" yss) surrounds entire line with )
" yss<p> surrounds line with the <p> tag and auto completes the closing tag
" to surround multiple lines with a tag like a <li></li> use visual selection
" then press St and type the tag. Notice that the first < is already written
" so dont type it twice otherwise you'll get <<li>
Plug 'https://github.com/tpope/vim-surround.git'

""""""""""""""""""""""""""""
" Fix Vim clipboardproblem "
""""""""""""""""""""""""""""
Plug 'christoomey/vim-system-copy'

""""""""""""""""""""""""""""
"       Syntax Check       "
""""""""""""""""""""""""""""
Plug 'https://github.com/vim-syntastic/syntastic.git'

"Nerdtree File Manager"fF
"""""""""""""""""""""""
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

""""""""""""""""""""""""""""
"        Alignment         "
""""""""""""""""""""""""""""
" use :TAB /[character] to align
" example :TAB /= alignes the =
Plug 'https://github.com/godlygeek/tabular.git'

""""""""""""""""""""""""""""
" Search & open prev files "
""""""""""""""""""""""""""""
Plug 'https://github.com/yegappan/mru.git'

""""""""""""""""""""""""""""
"    A menu that helps     "
"    learning the leader   "
"    Keybindings press     "
"   <leader>h to activate  "
""""""""""""""""""""""""""""
Plug 'liuchengxu/vim-which-key'

"------------------------------------------------------------------------------"
" Language Plugins
"------------------------------------------------------------------------------"
Plug 'lervag/vimtex'
"Plug 'Vimjas/vim-python-pep8-indent'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'fgsch/vim-varnish'
Plug 'hashivim/vim-terraform'
Plug 'stephpy/vim-yaml'
Plug 'maralla/completor.vim'
Plug 'mattn/emmet-vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'michaeljsmith/vim-indent-object'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'OmniSharp/omnisharp-vim'

" Formatting
Plug 'Chiel92/vim-autoformat'

"------------------------------------------------------------------------------"
" Colorschemes & Icons
"------------------------------------------------------------------------------"
"Plug 'wuelnerdotexe/vim-enfocado'
Plug 'ryanoasis/vim-devicons'
Plug 'https://github.com/sainnhe/everforest.git'
Plug 'jacoborus/tender'
Plug 'luochen1990/rainbow'

"------------------------------------------------------------------------------"
" Statusbar
"------------------------------------------------------------------------------"
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"------------------------------------------------------------------------------"
" Git tools
"------------------------------------------------------------------------------"
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'

"------------------------------------------------------------------------------"
" Tools
"------------------------------------------------------------------------------"
Plug 'RRethy/vim-illuminate'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-endwise'
Plug 'kana/vim-smartinput'
Plug 'cohama/vim-smartinput-endwise'
Plug 'tpope/vim-git'
Plug 'Yggdroot/indentLine'
Plug 'w0rp/ale'
call plug#end()

" Cursor "
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

"------------------------------------------------------------------------------"
" clipboard
"------------------------------------------------------------------------------"
" Using the clipboard plugin c-p can be used to copy to system clipboard
" and c-v to paste from system clipboard(works in visual mode) - xsel is a dependency
" For modern terminals such as konsole-xfce-mate etc... Ctrl Shift V works as
" usual

" The default mapping is cp for copying and cv for pasting, and can be followed by any motion or text object. For instance:
" cpiw => copy word into system clipboard
" cpi' => copy inside single quotes to system clipboard
" cvi' => paste inside single quotes from system clipboard
" In addition, cP is mapped to copy the current line directly.
" The sequence cV is mapped to paste the content of system clipboard to the next line.
"------------------------------------------------------------------------------"
set clipboard=unnamedplus

"------------------------------------------------------------------------------"
" Settings: UI
"------------------------------------------------------------------------------"
if has("gui_running")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        set guifont=*
    endif

    set guifont=Monospace\ 16

    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar

    " Copy & Paste normalcy
    nmap <C-V> "+gP
    imap <C-V> <ESC><C-V>i
    vmap <C-C> "+y
endif

" Enable truecolors
if (has("termguicolors"))
    set termguicolors
endif

"------------------------------------------------------------------------------"
" Plugin: syntastic
"------------------------------------------------------------------------------"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"------------------------------------------------------------------------------"
" Plugin: vim-varnish
"------------------------------------------------------------------------------"
let g:vcl_fold = 0

"------------------------------------------------------------------------------"
" Plugin: vimtex
"------------------------------------------------------------------------------"
 let g:tex_flavor = 'latex'

"------------------------------------------------------------------------------"
" Plugin: vim-markdown
"------------------------------------------------------------------------------"
" let g:vim_markdown_folding_disabled = 1
"let g:vim_markdown_folding_style_pythonic = 1

"------------------------------------------------------------------------------"
" Plugin: vim-illuminate
"------------------------------------------------------------------------------"
" Time in milliseconds (default 250)
let g:Illuminate_delay = 50
" Don't highlight word under cursor (default: 1)
let g:Illuminate_highlightUnderCursor = 0

"------------------------------------------------------------------------------"
" Plugin: nerdtree
"------------------------------------------------------------------------------"
" Start NERDTree and leave the cursor in it.
" autocmd VimEnter * NERDTree

"start nerdtree and put cursor in empty buffer or file
autocmd VimEnter * NERDTree | wincmd p

" Start NERDTree when Vim is started without file arguments.
" below 2 lines were commented for startify to work
"" autocmd StdinReadPre * let s:std_in=1
"" autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
            \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"nerdtree width
let g:NERDTreeWinSize=20

"remove press ? for help on top of nerdtree
let NERDTreeMinimalUI=1
"disable 80 extentions of nerdtree for less lag

let g:NERDTreeLimitedSyntax = 1

" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"""""""""""""""""""""""""""""""""
" NERDTree Functions and colors "
"""""""""""""""""""""""""""""""""
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" you can add these colors to your .vimrc to help customizing
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue

let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb

let g:WebDevIconsDefaultFolderSymbolColor = s:beige " sets the color for folders that did not match any rule
let g:WebDevIconsDefaultFileSymbolColor = s:blue " sets the color for files that did not match any rule


"------------------------------------------------------------------------------"
" Plugin: Rainbow
"------------------------------------------------------------------------------"
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

let g:rainbow_conf = {
\	'guifgs': ['cyan3', 'orange3', 'lightgreen', 'lightmagenta'],
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\	}
\}

"------------------------------------------------------------------------------"
" Theme: everforest
"------------------------------------------------------------------------------"
if has('termguicolors')
    set termguicolors
endif

set background=dark

" This configuration option should be placed before `colorscheme everforest`.
" Available values: 'hard', 'medium'(default), 'soft'
let g:everforest_background = 'hard'
" For better performance
let g:everforest_better_performance = 1
let g:everforest_enable_italic = 1

try
    colorscheme everforest
catch
    colorscheme default
endtry

"------------------------------------------------------------------------------"
" Theme: Airline settings
"------------------------------------------------------------------------------"
let g:airline_powerline_fonts = 0
let g:airline_theme = "hybrid"
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" Settings: Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

"------------------------------------------------------------------------------"
" Plugin: Terminal
"------------------------------------------------------------------------------"
if has('nvim')
    fu! OpenTerminal()
        " open split windows on the topleft
        topleft split
        " resize the height of terminal windows to 30
        resize 30
        :terminal
    endf
else
    fu! OpenTerminal()
        " open split windows on the topleft
        topleft split
        " resize the height of terminal windows to 30
        resize 15
        :call term_start('zsh', {'curwin' : 1, 'term_finish' : 'close'})
    endf
endif
nnoremap <silent> <Leader>t :call OpenTerminal()<cr>

"------------------------------------------------------------------------------"
" Plugin: OmniSharp
"------------------------------------------------------------------------------"
let g:OmniSharp_server_use_mono = 1

"------------------------------------------------------------------------------"
" Plugin: fzf
"------------------------------------------------------------------------------"
map ; :Files<CR> " bind ; key for fzf

nmap <C-f> :Files<CR>
nmap <C-o> :Buffers<CR>
nmap <C-;> :Tags<CR>

" layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~70%' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-h': 'split',
            \ 'ctrl-v': 'vsplit' }

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
            \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:70%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
            \ call fzf#vim#grep(
            \   'git grep --line-number '.shellescape(<q-args>), 0,
            \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview('right:70%'), <bang>0)

"------------------------------------------------------------------------------"
" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
"------------------------------------------------------------------------------"
let g:fzf_history_dir = '~/.local/share/fzf-history'

autocmd! VimEnter * command! -nargs=* -complete=file Ag :call fzf#vim#ag_raw(<q-args>, fzf#wrap('ag-raw', {'options': "--preview 'coderay $(cut -d: -f1 <<< {}) 2> /dev/null | sed -n $(cut -d: -f2 <<< {}),\\$p | head -".&lines."'"}))

"------------------------------------------------------------------------------"
" Plugin: Multiple Cursors
"------------------------------------------------------------------------------"
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

"------------------------------------------------------------------------------"
" Plugin: Autocomplete
"------------------------------------------------------------------------------"
" SuperTab settings
let g:SuperTabDefaultCompletionType = "<c-x>"

"------------------------------------------------------------------------------"
"                          Git tools
"------------------------------------------------------------------------------"
"------------------------------------------------------------------------------"
"  Plugin: Gitgutter settings
"------------------------------------------------------------------------------"

let g:gitgutter_max_signs             = 5000
let g:gitgutter_sign_added            = '⊕'
let g:gitgutter_sign_modified         = '⊖'
let g:gitgutter_sign_removed          = '⊗'
let g:gitgutter_sign_modified_removed = '⊜'
let g:gitgutter_map_keys              = 0
let g:gitgutter_diff_args             = '--ignore-space-at-eol'

nmap     <Leader>j <Plug>GitGutterNextHunkzz
nmap     <Leader>k <Plug>GitGutterPrevHunkzz
nnoremap <Leader>gs :GitGutterStageHunk<CR>
nnoremap <Leader>gu :GitGutterUndoHunk<CR>

" IndentLine settings
" Disable annoying doube quote concealing with JSON.
autocmd Filetype json let g:indentLine_setConceal = 0

let g:indentLine_char = ' '
"let g:indentLine_color_term = 235

" Reload vim config on changes.
if has ('autocmd')
    augroup vimrc
        autocmd! BufWritePost $MYVIMRC source % | redraw | :AirlineRefresh
        autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
    augroup END
endif

set showmatch				  " speed up bracket matching speed
set matchtime=2
set t_Co=256 " https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting
set cursorline                " highlight curor line
set nocursorcolumn
set hidden
set noautowrite               " do not automagically write on :next
set lazyredraw                " do not redraw when don't have to
set showmode
set showcmd
set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set history=10000
set backspace=indent,eol,start
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion
set noerrorbells              " no error bells please
set novisualbell              " no vusual bell either, please.
set belloff=all
set shell=zsh
set fileformats=unix
set ff=unix
set wildmode=longest:full
set wildmenu                  " menu has tab completion
set laststatus=2
set nowrap
set more                      " use more prompt
set autoread                  " watch for file changes
set ruler laststatus=2 showcmd showmode   " show the line number on the bar
set wrap breakindent
set encoding=utf-8
set title
set titleold=""
set titlestring=Vim:\ %F
set incsearch                 " incremental search
set ignorecase                " search ignoring case
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set diffopt=filler,iwhite     " ignore all whitespace and sync
set smartindent
"set number
"set relativenumber

"------------------------------------------------------------------------------"
" Custom Mappings "
"------------------------------------------------------------------------------"
" Set leader key to space
let mapleader =" "
" Leader key maps
nnoremap <leader>n :NERDTreeToggle <Cr>


"map <leader>f :Goyo <Cr>
map <leader>v :Vi <Cr>
map <leader>r :Ra <Cr>
map <leader>t :tabnew file <Cr>
map <F2> :Bracey <Cr>
map <F3> :BraceyReload <Cr>
map <F4> :BraceyStop <Cr>
"map <leader>d :g/^\(.*\)$\n\1/d<Cr>
"map <leader>m :MRU<Cr>
map <leader>h :WhichKey '<Space>'<Cr>
"--------------------------------------
inoremap jj <esc>
"nnoremap bs i#!/bin/bash<ESC>0
"nnoremap cn iconsole.log<ESC>0
nmap <leader>w :w!<cr>
"nnoremap sh :!chmod +x % && source %
"--------------------------------------
"""""""""""""""""""""""""""""""""
" Spell Check
"""""""""""""""""""""""""""""""""
map <F6> :setlocal spell! spelllang=en_us<cr>
set wildmode=longest,list,full
"--------------------------------------
"""""""""""""""""""""""""""""""""
" Keybindings for sane buffer
"           navigation
"""""""""""""""""""""""""""""""""
set splitbelow splitright
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <C-LEFT> <C-w>h
map <C-DOWN> <C-w>j
map <C-UP> <C-w>k
map <C-RIGHT> <C-w>l

map <s-+> :vertical resize +5 <Cr>
"map <s--> :vertical resize -5 <Cr>
"map <s-UP> :resize +5 <Cr>
"map <s-DOWN> :resize -5 <Cr>

nnoremap <M-Left> :tabprevious<CR>
nnoremap <M-Right> :tabnext<CR>
"""""""""""""""""""""""""""""""""
" Keybindings for tab navigation
"    with leader and number
"""""""""""""""""""""""""""""""""
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt

noremap <leader>0 :tablast<cr>
nnoremap <leader>x :tabclose<Cr>
map <leader>tm :tabmove<Cr>

map <leader>c :Colors<Cr>
map <leader>b :Buffers<Cr>
map <leader>s :Files<Cr>
map <leader>W :Windows<Cr>
map <leader>H :History<Cr>
map <leader>Hc :History:<Cr>
map <leader>M :Maps<Cr>

"""""""""""""""""""""""""""""""""
"  Commands and filemanagers    "
"""""""""""""""""""""""""""""""""
:command Ra !ranger
:command Vi !vifm
:command Na  tabnew file

"------------------------------------------------------------------------------"
" Statusline
"------------------------------------------------------------------------------"
if !&statusline
    " https://shapeshed.com/vim-statuslines/
    " http://vim.wikia.com/wiki/Writing_a_valid_statusline
    " http://learnvimscriptthehardway.stevelosh.com/chapters/17.html
    function! GitBranch()
        return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
    endfunction
    function! StatuslineGit()
        let l:branchname = GitBranch()
        return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
    endfunction
    set statusline=
    set statusline+=%#PmenuSel#                 " change background color
    " set statusline+=[%n]                        " buffer num
    " set statusline+=%{StatuslineGit()}
    set statusline+=%#LineNr#                   " change background color
    set statusline+=\ %f                        " file name
    " set statusline+=\ %.20F                     " file path, length limit 20%
    set statusline+=%m\                         " check modify status
    set statusline+=%=                          " align right
    set statusline+=%#CursorColumn#
    set statusline+=\ %y
    set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
    set statusline+=\[%{&fileformat}\]          " fileformat
    set statusline+=\ %l/%L:%c
    set statusline+=\ %p%%
    set statusline+=\                           " space at end
endif

" Backup
set backup
set backupdir=~/.vim/backup

"------------------------------------------------------------------------------"
" Filetype-Specific Configurations
"------------------------------------------------------------------------------"
if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on
    " Go
    autocmd BufRead,BufNewFile *.go set sw=4 sts=4
    autocmd BufRead,BufNewFile *.go set noexpandtab

    " Python
    autocmd BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent fileformat=unix

    " disable auto comment insertion
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Makefiles
    autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab

    " Markdown, YAML and Journal
    autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType yaml     setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType journal  setlocal shiftwidth=2 tabstop=2 softtabstop=2

    " set .vcl.j2 files to be treated as vcl files and not Jinja2 for
    " Ansible templating Varnish configuration files.
    autocmd FileType varnish *.vcl  set syntax=vcl
    autocmd BufNewFile,BufRead ?\+.vcl.j2 set filetype=vcl
endif

" For everything else, use a tab width of 4 space col.
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab smarttab

" Ignore
" Disable output and VCS files
set wildignore+=*.rbc,*.rbo,*.gem,.git,.svn
" Disable image files
set wildignore+=*.psd,*.png,*.jpg,*.gif,*.jpeg
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" Disable temp and backup files
set wildignore+=*.sw?,*~,._*,*.un~
" WP Language files
set wildignore+=*.pot,*.po,*.mo
" Fonts and such
set wildignore+=*.eot,*.eol,*.ttf,*.otf,*.afm,*.ffil,*.fon,*.pfm,*.pfb,*.woff,*.svg,*.std,*.pro,*.xsf
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.so,*.out,*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.luac " Lua byte code
set wildignore+=*.pyc " Python byte code
set wildignore+=*.class " Python byte code
set wildignore+=*.spl " compiled spelling word lists
set wildignore+=*/tmp/*,.DS_Store  " MacOSX/Linux

"------------------------------------------------------------------------------"
" Spelling
"------------------------------------------------------------------------------"
if v:version >= 700
    " Enable spell check for text files
    autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

" Define command history
let &viminfo='%,h,"4,''4,f0,/99,:' . &history
"             | |  |   |  |  |       +command-line history saved
"             | |  |   |  |  +search history saved
"             | |  |   |  +marks 0-9,A-Z 0=NOT saved
"             | |  |   +files saved for marks
"             | |  +lines saved each register (old name for <, vi6.2)
"             | +disable 'hlsearch' loading viminfo
"             +save/restore buffer list

" MatchTagAlways settings
let g:mta_filetypes = {
            \ 'html'  : 1,
            \ 'xhtml' : 1,
            \ 'xml'   : 1,
            \ 'jinja' : 1,
            \ 'php'   : 1,
            \ }

"------------------------------------------------------------------------------"
" Misc
" Vim-tmux navigator settings
"------------------------------------------------------------------------------"
let g:tmux_navigator_no_mappings = 1

"------------------------------------------------------------------------------"
"                                Languages
"------------------------------------------------------------------------------"
" ALE settings
"------------------------------------------------------------------------------"
let g:ale_set_highlights = 0
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']

let g:ale_sign_error = '⬣'
let g:ale_sign_warning = '⬣'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'

let g:ale_linters = {
            \ 'python'      : ['pylint', 'autopep8', 'flake8'],
            \ 'latex'       : ['lacheck'],
            \ 'javascript'  : ['eslint'],
            \ 'rust'        : ['rustc'],
            \ 'cs': ['OmniSharp']
            \}

" :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
            \ 'javascript': ['eslint'],
            \}


let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1 " Enable completion where available.
let g:airline#extensions#ale#enabled = 1 " Set this. Airline will handle the rest.

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
                \   '%dW %dE',
                \   all_non_errors,
                \   all_errors
                \)
endfunction

set statusline=%{LinterStatus()}

"------------------------------------------------------------------------------"
" Python Settings
"------------------------------------------------------------------------------"
" python autocomplete settings required jedi package
" $ pip install jedi
let g:completor_python_binary = '/usr/bin/python3'

" Terraform plugin options
let g:terraform_fold_sections=0
let g:terraform_remap_spacebar=1
let g:terraform_fmt_on_save=1

" Go settings
let g:go_highlight_functions         = 1
let g:go_highlight_methods           = 1
let g:go_highlight_fields            = 1
let g:go_highlight_types             = 1
let g:go_highlight_operators         = 1
let g:go_highlight_build_constraints = 1
let g:go_bin_path                    = expand('~/Projects/bin')
let g:go_list_type                   = 'quickfix'

let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"

let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0

let g:go_highlight_space_tab_error = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_methods = 0
let g:go_highlight_functions = 0

"------------------------------------------------------------------------------"
" CSS3 settings
"------------------------------------------------------------------------------"
augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
augroup END

"------------------------------------------------------------------------------"
" Javascript settings
"------------------------------------------------------------------------------"
autocmd FileType javascript set formatprg=prettier\ --stdin
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow  = 1

" Tern_for_vim settings
let g:tern#command   = ['tern']
let g:tern#arguments = ['--persistent']

"------------------------------------------------------------------------------"
" JS-Beautify
"------------------------------------------------------------------------------"
let g:config_Beautifier = {}
let g:config_Beautifier['js'] = {}
let g:config_Beautifier['js'].indent_style = 'tab'
let g:config_Beautifier['jsx'] = {}
let g:config_Beautifier['jsx'].indent_style = 'tab'
"let g:config_Beautifier['json'] = {}
"let g:config_Beautifier['json'].indent_style = 'tab'
let g:config_Beautifier['css'] = {}
let g:config_Beautifier['css'].indent_style = 'tab'
let g:config_Beautifier['html'] = {}
let g:config_Beautifier['html'].indent_style = 'tab'

"------------------------------------------------------------------------------"
" Tagbar Settings
"------------------------------------------------------------------------------"
nmap <C-t> :TagbarToggle<CR>

"------------------------------------------------------------------------------"
" gotags
"------------------------------------------------------------------------------"
let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }

"------------------------------------------------------------------------------"
"                                Misc. Mappings
"------------------------------------------------------------------------------"
" insert brackets
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}

" Auto-delete closing parenthesis/brace
function! BetterBackSpace() abort
    let cur_line = getline('.')
    let before_char = cur_line[col('.')-2]
    let after_char = cur_line[col('.')-1]
    if (before_char == '(' && after_char == ')') || (before_char == '{' && after_char == '}')
        return "\<Del>\<BS>"
    else
        return "\<BS>"
    endfunction

    inoremap <silent> <BS> <C-r>=BetterBackSpace()<CR>

    " Skip over closing parenthesis/brace
    inoremap <expr> ) getline('.')[col('.')-1] == ")" ? "\<Right>" : ")"
    inoremap <expr> } getline('.')[col('.')-1] == "}" ? "\<Right>" : "}"

    nmap <Leader>tl :set list!<cr>         " toggle list mode
    nmap <Leader>pp :set paste!<cr>        " toggle paste mode
    nnoremap <Leader>bw :lcd %:p:h<CR>:pwd<CR>  " Switch CWD to the directory of the current buffer

    " Split window settings
    nnoremap <C-J> <C-W><C-J> " Remap CTRL+W then J to just CTRL+J
    nnoremap <C-K> <C-W><C-K>
    nnoremap <C-L> <C-W><C-L>
    nnoremap <C-H> <C-W><C-H>

    " Open new split panes to right and bottom, which feels more natural than Vim’s default:
    set splitbelow
    set splitright

    "------------------------------------------------------------------------------"
    "           CursorShape: Toggle between bar and box based on mode.
    "------------------------------------------------------------------------------"
    " For gnome-terminal (≥3.16) & Konsole (KDE5)
    if has("autocmd")
        au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
        au InsertEnter,InsertChange *
                    \ if v:insertmode == 'i' |
                    \   silent execute '!echo -ne "\e[6 q"' | redraw! |
                    \ elseif v:insertmode == 'r' |
                    \   silent execute '!echo -ne "\e[4 q"' | redraw! |
                    \ endif
        au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
    endif

    " Vertical split bar
    set fillchars+=vert:│
    hi VertSplit                ctermbg=NONE ctermfg=0 guifg=#595749 guibg=NONE
    hi Normal                   ctermbg=NONE
    hi Comment                  ctermbg=NONE guibg=NONE
    hi nonText                  ctermbg=NONE guifg=#595749 guibg=NONE
    hi Visual                   guibg=#577882 guifg=#364347
    hi Terminal                 ctermbg=0 ctermfg=15
    hi MatchParen               cterm=none guifg=#00faff guibg=#377987

    "hi Pmenu      guibg=Grey38 guifg=#2e3135
    hi PmenuSel                 guibg=#577882 guifg=#364347

    " GitGutter styling
    hi clear SignColumn
    hi SignColumn               guibg=NONE
    hi GitGutterAdd             ctermfg=green  guifg=#3fa853 guibg=NONE
    hi GitGutterChange          ctermfg=yellow guifg=#9c9e3c guibg=NONE
    hi GitGutterDelete          ctermfg=red    guifg=#c95656 guibg=NONE
    hi GitGutterChangeDelete    ctermfg=yellow guifg=#9c9e3c guibg=NONE

    hi illuminatedWord          ctermfg=yellow guifg=#00faff guibg=#377987 gui=underline

    " Highlight trailing whitespace
    highlight ExtraWhitespace ctermbg=red guibg=#38595c
    match ExtraWhitespace /\s\+$/
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()

    " Remove trailing whitespace with F5
    nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>


"""""""""""""""""""""""""""""""""
"Dictionary Setting For WhichKey"
"""""""""""""""""""""""""""""""""
let g:which_key_map = {
      \ 'f'     : ['Goyo'                , 'Goyo']                   ,
      \ 'v'     : ['Vifm'                , 'Vifm']                   ,
      \ 'r'     : ['Ranger'              , 'Ranger']                 ,
      \ 't'     : ['tabnew'              , 'Open New Tab']           ,
      \ 'd'     : ['Duplicate Cleaner'   , 'Delete Duplicate Lines'] ,
      \ 'm'     : ['MRU'                 , 'View File History']      ,
      \ 'h'     : ['This Menu'           , 'This Menu']              ,
      \ 'cc'    : ['Comment Out'         , 'Comment Out']            ,
      \ 'cu'    : ['Uncomment'           , 'Uncomment']              ,
      \ '1-9'   : ['Go To Tab By Number'               , 'Go To Tab By Number 0 Is Tab 10'] ,
      \ 'F8'    : ['Open MD Server'                    , 'MD Server']                       ,
      \ 'F2'    : ['Web Server'                        , 'Web Server']                      ,
      \ 'F3'    : ['Web Server'                        , 'Web Server Reload']               ,
      \ 'F4'    : ['Web Server'                        , 'Web Server Stop']                 ,
      \ 'F6'    : ['Spellcheck'                        , 'Spellcheck']                      ,
      \ 'C-vimkeys/arrows' : ['Move Between Splits'    , 'Move Between Splits']             ,
      \ 'S-Plus/S-Minus'   : ['Resize Splits'          , 'Resize Splits']                   ,
      \ 'Alt-arrows'       : ['Tab Right Or Left'      , 'Tab Right OR Left']               ,
      \ 'c'     : ['Colors'                            , 'Colors']                          ,
      \ 'b'     : ['Buffers'                           , 'Buffers']                         ,
      \ 's'     : ['Files'                             , 'Files']                           ,
      \ 'W'     : ['Windows'                           , 'Windows']                         ,
      \ 'H'     : ['History'                           , 'History']                         ,
      \ 'Hc'    : ['CMD History'                       , 'CMD History']                     ,
      \ 'M'     : ['Maps'                              , 'Maps']                            ,
      \ 'C-f'   : ['Beautify'                          , 'Brautify']                        ,
      \ 'w'     : ['Quick Save'                        , 'Quick Save']                      ,
      \ 'tm'    : ['TabMove'                           , 'TaBMove']                         ,
      \ }

let g:which_key_map.1 = 'which_key_ignore'
let g:which_key_map.2 = 'which_key_ignore'
let g:which_key_map.3 = 'which_key_ignore'
let g:which_key_map.4 = 'which_key_ignore'
let g:which_key_map.5 = 'which_key_ignore'
let g:which_key_map.6 = 'which_key_ignore'
let g:which_key_map.7 = 'which_key_ignore'
let g:which_key_map.8 = 'which_key_ignore'
let g:which_key_map.9 = 'which_key_ignore'
let g:which_key_map.0 = 'which_key_ignore'

call which_key#register('<Space>', "g:which_key_map")
"""""""""""""""""""""""""""""""
"Options For The Startify Menu"
"""""""""""""""""""""""""""""""
 let g:startify_custom_header =
       \ startify#pad(split(system('figlet -w 100 Vim'), '\n'))
"Incase you are insane and want to open a new tab with Goyo enabled
 autocmd BufEnter *
       \ if !exists('t:startify_new_tab') && empty(expand('%')) && !exists('t:goyo_master') |
       \   let t:startify_new_tab = 1 |
       \   Startify |
       \ endif
"Bookmarks.
let g:startify_bookmarks = [ 
            \ {'A': '~/Projects/src/stash.nm.cbc.ca/syssrvcfg/apache'},
            \ {'B': '~/Projects/src/stash.nm.cbc.ca/syssrvcfg/varnish'},
            \ {'C': '~/Projects/src/stash.nm.cbc.ca/cloud/varnish'},
            \ {'D': '~/Projects/src/gitlab.nm.cbc.ca/'},
            \ {'E': '~/.zshrc'},
            \ {'F': '~/.vimrc'}
            \ ]
    let g:startify_lists = [
          \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
          \ { 'type': 'files',     'header': ['   Recent']         },
          \ { 'type': 'sessions',  'header': ['   Sessions']       },
          \ { 'type': 'commands',  'header': ['   Commands']       },
          \ ]
"cant tell wtf it does so its commented
" \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },

hi StartifyBracket ctermfg=240
hi StartifyFile    ctermfg=147
hi StartifyFooter  ctermfg=240
hi StartifyHeader  ctermfg=114
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
hi StartifySpecial ctermfg=240
