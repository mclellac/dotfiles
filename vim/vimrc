" Plugins
"""""""""""""""""""""""""""""""
" Enable nocompatible
if has('vim_starting')
  if &compatible
    set nocompatible
  endif
endif

filetype off
" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

Plug 'jacoborus/tender'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-git'
Plug 'tpope/vim-surround'
Plug 'fatih/vim-go'
Plug 'Blackrush/vim-gocode'
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'jstemmer/gotags'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'pearofducks/ansible-vim'
Plug 'smerrill/vcl-vim-plugin'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'lepture/vim-jinja'
Plug 'lifepillar/vim-solarized8'    " colorscheme
Plug 'romainl/flattened'            " colorscheme
Plug 'mhartington/oceanic-next'     " using for airline theme
Plug 'fgsch/vim-varnish'
" deoplete plugins
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1
" Some JavaScript plugins
Plug 'pangloss/vim-javascript'
Plug 'sheerun/vim-polyglot'
Plug 'mxw/vim-jsx'
Plug 'othree/yajs.vim'
Plug 'w0rp/ale'
call plug#end()

" NERDTree settings
"""""""""""""""""""""""""""""""""
let NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

map <C-n> :NERDTreeToggle<CR> " bind ctrl+n to open/close nerdtree.

" close vim if nerdtree is the only open window.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&  b:NERDTreeType == "primary") | q | endif

" Open nerdtree automatically if no files were specified to be opened
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

let NERDTreeQuitOnOpen=1 " Close nerdtree after opening a file with nerdtree

autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Deoplete settings.
"""""""""""""""""""""""""""""""""
set completeopt-=preview " Disable documentation window

" Split settings
"""""""""""""""""""""""""""""""""
nnoremap <C-J> <C-W><C-J> " Remap CTRL+W then J to just CTRL+J
nnoremap <C-K> <C-W><C-K> 
nnoremap <C-L> <C-W><C-L> 
nnoremap <C-H> <C-W><C-H> 

" Vim defaults
" Ctrl+W R ->  Swap top/bottom or left/right split
" Ctrl+W T ->  Break out current window into a new tabview
" Ctrl+W o ->  Close every window in the current tabview but the current one

" Open new split panes to right and bottom, which feels more natural than Vim’s default:
set splitbelow
set splitright

set mouse=a " Enable mouse use in all modes

" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" Colouring
""""""""""""""""""""""""""""""""
" Enable truecolors
if (has("termguicolors"))
 set termguicolors
endif

syntax enable
set background=dark
try
    colorscheme solarized8
catch
    colorscheme default
endtry

" Solarized
let g:solarized_degrade = 0
let g:solarized_termtrans = 1
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italics = 0
let g:solarized_contrast = 'normal'
let g:solarized_visibility = 'high'

" Custom styling
" Vertical split bar
set fillchars+=vert:│
autocmd ColorScheme * highlight VertSplit cterm=NONE ctermfg=Green ctermbg=NONE

" text colors
"highlight Normal ctermbg=NONE
"highlight Comment ctermbg=NONE
"highlight nonText ctermbg=NONE

" select colors
highlight Visual cterm=bold ctermbg=006 ctermfg=000

" vim-gitgutter settings
highlight SignColumn ctermbg=002

" vim-airline settings
""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts = 0
let g:airline_theme='oceanicnext'

" vim-airline straight tabs
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" JavaScript settings
""""""""""""""""""""""""""""""""
autocmd FileType javascript set formatprg=prettier\ --stdin

" ALE settings
""""""""""""""""""""""""""""""""
" :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
    \ 'javascript': ['eslint'],
\}

let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1 " Enable completion where available.
let g:airline#extensions#ale#enabled = 1 " Set this. Airline will handle the rest.

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline=%{LinterStatus()}

" Python Settings
""""""""""""""""""""""""""""""""
" python autocomplete settings required jedi package
" $ pip install jedi 
let g:completor_python_binary = '/usr/local/bin/python3.6'

" tagbar settings
""""""""""""""""""""""""""""""""
nmap <C-t> :TagbarToggle<CR>

" gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

" speed up the annoying parens & bracket matching speed
set showmatch
set matchtime=0

""" Filetype-Specific Configurations
if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " disable auto comment insertion
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Makefiles
    autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab

    " HTML, XML, Jinja
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType xml setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType htmldjango inoremap {{ {{  }}<left><left><left>
    autocmd FileType htmldjango inoremap {% {%  %}<left><left><left>
    autocmd FileType htmldjango inoremap {# {#  #}<left><left><left>

    " Markdown and Journal
    autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType journal setlocal shiftwidth=2 tabstop=2 softtabstop=2
endif

" For everything else, use a tab width of 4 space col.
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab smarttab

" General editor settings
"""""""""""""""""""""""""""""""
set ttyfast " Send more characters for redraws

" indentLine settings
let g:indentLine_char = ' '
"let g:indentLine_color_term = 235

set t_Co=256 " https://vi.stackexchange.com/questions/7112/tmux-messing-with-vim-highlighting

if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
      set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h14
   endif
endif

set hidden
set noautowrite               " don't automagically write on :next
set lazyredraw                " don't redraw when don't have to
set showmode
set showcmd
set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set history=200
set backspace=indent,eol,start
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion
set noerrorbells              " No error bells please
set shell=zsh
set fileformats=unix
set ff=unix
set wildmode=longest:full
set wildmenu                  " menu has tab completion
let maplocalleader=','        " all my macros start with ,
set laststatus=2
set nowrap
set more                      " use more prompt
set autoread                  " watch for file changes
set ruler laststatus=2 showcmd showmode   " show the line number on the bar
set list listchars=trail:»,tab:»-
set wrap breakindent
set encoding=utf-8
"set number
set title

" Searching
"""""""""""""""""""""""""""""""
set incsearch                 " incremental search
set ignorecase                " search ignoring case
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set diffopt=filler,iwhite     " ignore all whitespace and sync
  
" Backup
"""""""""""""""""""""""""""""""
set backup
set backupdir=~/.vim/backup

" Ansible plugin options
"""""""""""""""""""""""""""""""
let g:ansible_options = {'ignore_blank_lines': 0}
let g:ansible_extra_keywords_highlight = 1
let g:ansible_template_syntaxes = 1

" Define command history
"""""""""""""""""""""""""""""""
let &viminfo='%,h,"4,''4,f0,/99,:' . &history 
"             | |  |   |  |  |       +command-line history saved 
"             | |  |   |  |  +search history saved 
"             | |  |   |  +marks 0-9,A-Z 0=NOT saved 
"             | |  |   +files saved for marks 
"             | |  +lines saved each register (old name for <, vi6.2) 
"             | +disable 'hlsearch' loading viminfo 
"             +save/restore buffer list 

" Spelling
if v:version >= 700
    " Enable spell check for text files
    autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

" Mappings
"""""""""""""""""""""""""""""""
" toggle list mode
nmap <LocalLeader>tl :set list!<cr>
" toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>
