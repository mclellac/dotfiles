#------------------------------------------------------------------------------#
#                   ███████╗███████╗██╗  ██╗██████╗  ██████╗                   #
#                   ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝                   #
#                     ███╔╝ ███████╗███████║██████╔╝██║                        #
#                    ███╔╝  ╚════██║██╔══██║██╔══██╗██║                        #
#                   ███████╗███████║██║  ██║██║  ██║╚██████╗                   #
#                   ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝                   #
#------------------------------------------------------------------------------#
#zmodload zsh/zprof
export LANG="en_US.UTF-8"
export TERM="xterm-256color"
stty sane

autoload -Uz compinit

#for dump in ~/.zcompdump(N.mh+24); do
#  compinit
#done

for dump in ~/.zcompdump*; do
    compinit
done

compinit -C

# Must be sourced before powerlevel10k as it includes the $WORK_DOMAIN variable
# the custom OpenShift segment uses.
source ${HOME}/.zprivate

# powerlevel10k prompt settings
source ${HOME}/.config/dotfiles/zsh/powerlevel10k.conf

if [[ ! -d "${HOME}/.zgen" ]]; then
    echo "Zgen not found. Installing."
    git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"
fi

# load zgen
source "${HOME}/.zgen/zgen.zsh"

# If the init scipt doesn't exist.
if ! zgen saved; then
    echo "Creating a zgen save"

    # Bulk load.
    zgen loadall <<EOPLUGINS
        zsh-users/zsh-syntax-highlighting
        zsh-users/zsh-autosuggestions
        bhilburn/powerlevel9k powerlevel9k
        zsh-users/zsh-history-substring-search
EOPLUGINS
    # ^ Can't indent EOPLUGINS.

    # Completions.
    zgen load zsh-users/zsh-completions src

    # Save all to init script.
    zgen save
fi

# Go 1.11+ modules support
export GO111MODULE=on

# Autosuggest plugin configuration.
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=242"

# Add history-substring-search-* widgets to list of widgets that clear the autosuggestion.
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(history-substring-search-up history-substring-search-down)
# Remove *-line-or-history widgets from list of widgets that clear the autosuggestion to
# avoid conflict with history-substring-search-* widgets.
ZSH_AUTOSUGGEST_CLEAR_WIDGETS=("${(@)ZSH_AUTOSUGGEST_CLEAR_WIDGETS:#(up|down)-line-or-history}")

if test -e "${HOME}/.iterm2_shell_integration.zsh"; then
   source "${HOME}/.iterm2_shell_integration.zsh"
fi

if [[ -n "$ITERM_SESSION_ID" ]]; then
    tab-red()   { tab-color 255 46 46 }
    tab-green() { tab-color 82 204 141 }
    tab-blue()  { tab-color 101 127 173 }
    tab-reset() { echo -ne "\033]6;1;bg;*;default\a" }

    tab-color() {
        echo -ne "\033]6;1;bg;red;brightness;$1\a"
        echo -ne "\033]6;1;bg;green;brightness;$2\a"
        echo -ne "\033]6;1;bg;blue;brightness;$3\a"
    }

    function iterm2_tab_precmd() {
        tab-reset
    }

    function iterm2_tab_preexec() {
        if [[ "$1" =~ "^ssh " ]]; then
            if [[ "$1" =~ ".ca$" ]]; then
                tab-color 252 3 3
            elif [[ "$1" =~ "bastion" ]]; then
                tab-color 255 153 0
            else
                tab-color 112 204 163
            fi
        else
            tab-color 116 178 181
        fi
    }

    autoload -U add-zsh-hook
    add-zsh-hook precmd  iterm2_tab_precmd
    add-zsh-hook preexec iterm2_tab_preexec
fi

function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip

# LLVM path & DOOM emacs
export PATH="/usr/local/opt/llvm/bin:${HOME}/.emacs.d/bin:${HOME}/.local/bin:/usr/local/opt/yq@3/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# Solarized colors
export FZF_DEFAULT_OPTS='
  --color=bg+:#1a473a,bg:#383838,spinner:#2CFFE0,hl:#35ad81
  --color=fg:#839496,header:#20d9d3,info:#35ad81,pointer:#00f1f1
  --color=marker:#1f454b,fg+:#41d99f,prompt:#2f9a73,hl+:#00ffd9'

source "${HOME}"/.config/dotfiles/zsh/zshrc.d/zoptions
source "${HOME}"/.config/dotfiles/zsh/zshrc.d/zbindings
source "${HOME}"/.config/dotfiles/zsh/zshrc.d/zalias
source "${HOME}"/.config/dotfiles/zsh/zshrc.d/zenv
source "${HOME}"/.config/dotfiles/zsh/zshrc.d/zfunc
#source /etc/profile.d/*.sh

set -k
# To enable zsh auto-completion, run: eval "$(/usr/local/bin/akamai --zsh)"
# We recommend adding this to your .zshrc file
autoload -U compinit && compinit
autoload -U bashcompinit && bashcompinit
_akamai_cli_bash_autocomplete() {
    local cur opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-auto-complete )
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}

complete -F _akamai_cli_bash_autocomplete akamai

if command -v nvim >/dev/null 2>&1; then
  alias vim=nvim
fi

#zprof

HOMEBREW_GITHUB_API_TOKEN=$(cat ~/.github_token)
export HOMEBREW_GITHUB_API_TOKEN

if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
    export MOZ_ENABLE_WAYLAND=1
fi

# Install deno with curl -fsSL https://deno.land/x/install/install.sh | sh
export DENO_INSTALL="${HOME}/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

if command -v oc &> /dev/null; then
  source <(oc completion zsh)
  compdef _oc oc
fi

