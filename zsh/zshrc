#-- options --
HISTFILE=$HOME/.zhistory            # enable history saving on shell exit
HISTSIZE=1200                       # lines of history to maintain memory
SAVEHIST=1000                       # lines of history to maintain in history file.
setopt MULTIOS                      # pipe to multiple outputs
setopt CORRECT                      # spell check commands
setopt APPEND_HISTORY               # append rather than overwrite history file.
setopt HIST_EXPIRE_DUPS_FIRST       # allow dups, but expire old ones when I hit HISTSIZE
setopt EXTENDED_HISTORY             # save timestamp and runtime information
export SAVEHIST HISTFILE HISTSIZE
export HISTCONTROL=ignoredups
export TERM='xterm-256color'

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
setopt rmstarsilent

#-- bindings --
# CTRL+left & CTRL+right keybinding to go back or forward a word
bindkey ';5D' emacs-backward-word
bindkey ';5C' emacs-forward-word

#-- zprezto --
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#-- development --
github_path=$HOME/Projects/src/github.com
work_git_path=$HOME/Projects/src/stash
source ~/.zprivate                  # .zprivate includes: $email, $work_email and ssh aliases.

if [ ! -d $github_path ]; then
    mkdir -p ${HOME}/Projects/{pkg,src,bin}
    mkdir -p $github_path
    mkdir -p $work_git_path
fi

if ! grep -Fxq $work_email $HOME/.gitconfig; then
    # putting realname here so it doesn't get assigned every time
    # a new shell starts. Only when the .gitconfig file
    # requires modification should it spawn a subshell
    # and assign the current users name to the realname variable 
    realname=$(finger `whoami` | awk -F: '{ print $3 }' | head -n1 | sed 's/^ //')
    git config --global user.name  "${realname}"
    git config --global user.email "${work_email}"  
fi

#-- path variables --
export PATH=$PATH:$HOME/bin:$GOROOT/bin:$GOPATH/bin:/usr/local/bin:/bin:/usr/bin:/usr/sbin:/sbin
export EDITOR=vim
export VISUAL=vim
export GOROOT='/usr/local/go'
export GOPATH=$HOME/Projects

#-- set new tmux window name the hostname --
printf "\033k`hostname -s`\033\\"

#-- aliases --
alias gitlog="git log --pretty=format:\"%h %an %s\""
alias history="history 0"
alias agenda="gcalcli agenda"
alias calw="clear; gcalcli calw -w 12"
alias calm="clear; gcalcli calm -w 20"

#-- list the top 20 commands used in history --
cmdhist() {
    history|awk '{print $2}'|sort|uniq -c|sort -rn|head -20|  \
    awk '!max{max=$1;}{r="";i=s=60*$1/max;while(i-->0)r=r"•"; printf "\033[1;34m\%15s\033[0m  %5d ￨ \033[1;36m\%s\033[0m %s",$2,$1,r,"\n";}'
}

#-- rename tmux window to the address ssh'ed to --
ssh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
        tmux rename-window "$*"
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh "$@"
    fi
}

#--  command wrapper functions --
diga() {  dig +nocmd "$*" any +multiline +noall +answer }
fed()  {  find . -type f -name "$*" -exec vim {} \; }  # edit the file passed as an argument
# command line Sean Connery
connerize()     { echo "$*" | sed "s/s/sh/g" }
connerize-say() { echo "$*" | sed 's/s/sh/g' | say -v "Alex" -i -r 200 }

# simple calculator
function calc() {
    # you will need to escape multiplication (ie: "calc 2 \* 20")
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20
    
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//'   # remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

precmd() {
    if [[ ( ${-} == *i* ) && ( ${TERM} == screen* ) ]]
    then
        echo -n "\ek$(hostname -fs)\e\\"
    fi
}

function _update_ps1()
{
  export PROMPT="$(~/.powerline-zsh.py $?)"
}
precmd()
{
  _update_ps1
}

#function powerline_precmd() {
#    export PS1="$(/usr/lib/powerline/powerline-shell.py $? --shell zsh 2> /dev/null)"
#    export SUDO_PS1="$(/usr/lib/powerline/powerline-shell.py $? --shell zsh 2> /dev/null)"
#}

#function install_powerline_precmd() {
#    for s in "${precmd_functions[@]}"; do
#        if [ "$s" = "powerline_precmd" ]; then
#            return
#        fi
#    done
#    precmd_functions+=(powerline_precmd)
#}
#install_powerline_precmd

# iterm2 integration if using OSX, and if it's been installed.
if [[ `uname -s` == "Darwin" ]]; then
  if [ -f ${HOME}/.iterm2_shell_integration.zsh ]; then
      source ${HOME}/.iterm2_shell_integration.zsh
  fi
fi

