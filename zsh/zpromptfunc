# zpromptfunc

local LC_ALL="" LC_CTYPE="en_US.UTF-8"
glyph=(
    LEFT_SEGMENT_SEPARATOR          $'\uE0B0'              # 
    RIGHT_SEGMENT_SEPARATOR         $'\uE0B2'              # 
    LEFT_SEGMENT_END_SEPARATOR      ' '                    # Whitespace
    LEFT_SUBSEGMENT_SEPARATOR       $'\uE0B1'              # 
    RIGHT_SUBSEGMENT_SEPARATOR      $'\uE0B3'              # 
    CARRIAGE_RETURN_GLYPH           $'\u21B5'              # ↵
    ROOT_GLYPH                      $'\uE614 '             # 
    RUBY_GLYPH                      $'\uF219 '             # 
    AWS_GLYPH                       $'\uF270'              # 
    AWS_EB_GLYPH                    $'\UF1BD  '            # 
    BACKGROUND_JOBS_GLYPH           $'\uF013 '             # 
    TEST_GLYPH                      $'\uF188'              # 
    TODO_GLYPH                      $'\uF133'              # 
    BATTERY_GLYPH                   $'\UF240 '             # 
    DISK_GLYPH                      $'\uF0A0'              #  
    OK_GLYPH                        $'\uF00C'              # 
    FAIL_GLYPH                      $'\uF00D'              # 
    SYMFONY_GLYPH                   $'\uE757'              # 
    NODE_GLYPH                      $'\uE617 '             # 
    MULTILINE_FIRST_PROMPT_PREFIX   $'\u256D'$'\U2500'     # ╭─
    MULTILINE_SECOND_PROMPT_PREFIX  $'\u2570'$'\U2500 '    # ╰─
    APPLE_GLYPH                     $'\uF179'              # 
    FREEBSD_GLYPH                   $'\UF30E '             # 
    ANDROID_GLYPH                   $'\uF17B'              # 
    LINUX_GLYPH                     $'\uF17C'              # 
    SUNOS_GLYPH                     $'\uF185 '             # 
    HOME_GLYPH                      $'\uF015'              # 
    HOME_SUB_GLYPH                  $'\uF07C'              # 
    FOLDER_GLYPH                    $'\uF115'              # 
    NETWORK_GLYPH                   $'\uF1EB'              # 
    LOAD_GLYPH                      $'\uF080 '             # 
    SWAP_GLYPH                      $'\uF464'              # 
    RAM_GLYPH                       $'\uF0E4'              # 
    SERVER_GLYPH                    $'\uF0AE'              # 
    VCS_UNTRACKED_GLYPH             $'\uF059'              # 
    VCS_UNSTAGED_GLYPH              $'\uF06A'              # 
    VCS_STAGED_GLYPH                $'\uF055'              # 
    VCS_STASH_GLYPH                 $'\uF01C '             # 
    VCS_INCOMING_CHANGES_GLYPH      $'\uF01A '             # 
    VCS_OUTGOING_CHANGES_GLYPH      $'\uF01B '             # 
    VCS_TAG_GLYPH                   $'\uF02B '             # 
    VCS_BOOKMARK_GLYPH              $'\uF461 '             # 
    VCS_COMMIT_GLYPH                $'\uE729 '             # 
    VCS_BRANCH_GLYPH                $'\uF126 '             # 
    VCS_REMOTE_BRANCH_GLYPH         $'\uE728 '             # 
    VCS_GIT_GLYPH                   $'\uF113 '             # 
    VCS_GIT_GITHUB_GLYPH            $'\uE709 '             # 
    VCS_GIT_BITBUCKET_GLYPH         $'\uE703 '             # 
    VCS_GIT_GITLAB_GLYPH            $'\uF296 '             #  
    VCS_HG_GLYPH                    $'\uF0C3 '             # 
    VCS_SVN_GLYPH                   $'\uE72D '             # 
    RUST_GLYPH                      $'\uE7A8 '             # 
    PYTHON_GLYPH                    $'\UE73C '             # 
    SWIFT_GLYPH                     $'\uE755'              # 
    GO_GLYPH                        $'\uE626'              # 
    PUBLIC_IP_GLYPH                 $'\UF0AC'              # 
    LOCK_GLYPH                      $'\UF023'              #  
    EXECUTION_TIME_GLYPH            $'\uF252'              #  
    SSH_GLYPH                       $'\uF489'              #  
)

setopt prompt_subst
autoload -U colors && colors # Prompt olor support

# Username/host string when connected over SSH (empty otherwise)
ssh_info() {
  [[ "$SSH_CONNECTION" != '' ]] && echo '%(!.%{$fg[red]%}.%{$fg[yellow]%})%n%{$reset_color%}@%{$fg[green]%}%m%{$reset_color%}:' || echo ''
}

# Echoes information about Git repository status when inside a Git repository
git_info() {

  # Git branch/tag, or name-rev if on detached head
  local GIT_LOCATION=${$(git name-rev --name-only --no-undefined --always HEAD 2> /dev/null)#(refs/heads/|tags/)}

  if [ -n "$GIT_LOCATION" ]; then

    local AHEAD="%{$fg[red]%}⇡NUM%{$reset_color%}"
    local BEHIND="%{$fg[cyan]%}⇣NUM%{$reset_color%}"
    local MERGING="%{$fg[magenta]%}⚡︎%{$reset_color%}"
    local UNTRACKED="%{$fg[red]%}●%{$reset_color%}"
    local MODIFIED="%{$fg[yellow]%}●%{$reset_color%}"
    local STAGED="%{$fg[green]%}●%{$reset_color%}"

    local -a DIVERGENCES
    local -a FLAGS

    local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_AHEAD" -gt 0 ]; then
      DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
    fi

    local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_BEHIND" -gt 0 ]; then
      DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
    fi

    local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
    if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
      FLAGS+=( "$MERGING" )
    fi

    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      FLAGS+=( "$UNTRACKED" )
    fi

    if ! git diff --quiet 2> /dev/null; then
      FLAGS+=( "$MODIFIED" )
    fi

    if ! git diff --cached --quiet 2> /dev/null; then
      FLAGS+=( "$STAGED" )
    fi

    local -a GIT_INFO
    GIT_INFO+=( "\033[38;5;15m±" )
    [ -n "$GIT_STATUS" ] && GIT_INFO+=( "$GIT_STATUS" )
    [[ ${#DIVERGENCES[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
    [[ ${#FLAGS[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)FLAGS}" )
    GIT_INFO+=( "\033[38;5;15m$GIT_LOCATION%{$reset_color%}" )
    echo "${(j: :)GIT_INFO}"

  fi

}

# Use ❯ as the non-root prompt character; # for root
# Change the prompt character color if the last command had a nonzero exit code
PS1='
$(${SSH_GLYPH} ssh_info)%{$fg[magenta]%}%~%u ${VCS_GIT_GLYPH}$(git_info)
%(?.%{$fg[blue]%}.%{$fg[red]%})%(!.#.❯)%{$reset_color%} '


#------------------------------------------------------------------------------#
#                              GCloud
#------------------------------------------------------------------------------#
gcloud config list --format='value(core.account)' 2>/dev/null # user account email
gcloud auth list  2>/dev/null | grep ACTIVE #


#------------------------------------------------------------------------------#
#                             OpenShift
#------------------------------------------------------------------------------#





#------------------------------------------------------------------------------#
#                             Kubernetes
#------------------------------------------------------------------------------#



#------------------------------------------------------------------------------#
#                               Docker
#------------------------------------------------------------------------------#


