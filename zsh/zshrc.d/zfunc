# Utility functions
grey="$(tput bold ; tput setaf 0)"
red=$(tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
yellow=$(tput setaf 11)
blue=$(tput setaf 68)
brown=$(tput setaf 130)
orange=$(tput setaf 172)
reset=$(tput sgr0)

#------------------------------------------------------------------------------#
#                       Command wrapper functions
#------------------------------------------------------------------------------#
digans() { dig "$*" +noall +answer; }
digsoa() { dig "$*" SOA +noall +answer; }
digmx()  { dig "$*" MX +noall +answer; }
digns()  { dig "$*" NS +noall +answer; }
digany() { dig "$*" ANY +noall +answer; }

#gcluster() {
#	local ctx=$1
#	local zone=$2
#	local prj=$3
#
#	if [[ $# -ne 3 ]]; then
#		printf 'gcluster requires a context, region, and project arguments\nie:\n]\t'
#		printf 'gcluster failover us-west1-b myproject\n'
#		return 1
#	fi
#
#	echo "gcloud container clusters get-credentials ${ctx} --zone ${zone} --project ${prj}"
#	gcloud container clusters get-credentials ${ctx} --zone ${zone} --project ${prj}
#}

kubepass() { kubectl config view -o jsonpath='{.users[?(@.name == "$*")].user.password}' }
kubectx () { kubectl config current-context }
kubeip()   { kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}' }

#pathln() { echo $PATH | tr : '\n'; }

#--------------------------------------------------------------#
# display certs for given host
# usage:
#      > showcert example.com:443
#--------------------------------------------------------------#
showcert() {
    echo openssl s_client -showcerts -connect $*
    echo -n | openssl s_client -showcerts -connect $*
}

ssldump() {
    NIC=$1
    PORT=$2
    sudo tcpdump -ni $NIC "tcp port ${PORT} and (tcp[((tcp[12] & 0xf0) >> 2)] = 0x16)" -vvvv
}

check_compression() {
    curl -s -I -H 'Accept-Encoding: br,gzip,deflate' $1 |grep -i "Content-Encoding"
}


#--------------------------------------------------------------#
# list the top 20 commands used in history.
#--------------------------------------------------------------#
cmdhist() {
    history | awk '{print $2}' | sort | uniq -c | sort -rn | head -20 | sed 's/.\///g' | \
        awk '!max{max=$1;}{r=""; i=s=60 * $1/max; while(i-->0) r=r"█"; printf "\033[1;34m %15s \033[0m %4d \033[1;36m %s \033[0m %s", $2, $1, r, "\n";}'
}

#--------------------------------------------------------------#
# some Sean Connery, because why not?
#--------------------------------------------------------------#
connerize() {
    echo "connery: $*" | sed -e "s/s/sh/g" -e "s/shsh/sh/g" -e "s/shh/sh/g"
}

connerize-say() {
    echo "$*" | sed -e "s/s/sh/g" -e "s/shsh/sh/g" -e "s/shh/sh/g" | say -v "Alex" -i -r 200
}

#--------------------------------------------------------------#
# Akamai cURL
#   Usage:  akcurl https://example.com
#--------------------------------------------------------------#
akcurl() {
    local headers="Pragma: akamai-x-get-request-id,akamai-x-get-cache-key,akamai-x-cache-on,akamai-x-cache-remote-on,akamai-x-get-true-cache-key,akamai-x-check-cacheable,akamai-x-get-extracted-values,akamai-x-feo-trace,x-akamai-logging-mode: verbose"

    echo "curl -sIXGET \"$@\" -H \"${headers[*]}\""
    curl -sIXGET "$@" -H "${headers[*]}"
}

cache-key-curl() {
    local headers="Pragma: akamai-x-get-cache-key,akamai-x-get-true-cache-key,akamai-x-check-cacheable"

    echo "curl -sIXGET \"$@\" -H \"${headers[*]}\""
    curl -sIXGET "$@" -H "${headers[*]}"
}

#--------------------------------------------------------------#
# Akamai cURL
#   Usage:  akcurl https://www.cbc.ca/lite
#--------------------------------------------------------------#
akcurl_old() {
    AKFLAGS=(
        -H "Pragma: akamai-x-get-request-id, akamai-x-get-cache-key, akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-get-true-cache-key, akamai-x-check-cacheable, akamai-x-get-extracted-values, akamai-x-feo-trace"
        -H "x-akamai-logging-mode: verbose"
        -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17"
        -vv
        -s
        -w "%{http_code}\n"
    )
    echo "curl -siL -D - -o /dev/null ${AKFLAGS[*]} \"$*\""
    curl -siL -D - -o /dev/null "${AKFLAGS[@]}" "$*"
}

#--------------------------------------------------------------#
# Akamai HTTPie
# Usage: akhttp https://www.cbc.ca/lite
#--------------------------------------------------------------#
akhttp() {
  local headers='"Pragma: akamai-x-get-request-id,akamai-x-get-cache-key,akamai-x-cache-on,akamai-x-cache-remote-on,akamai-x-get-true-cache-key,akamai-x-check-cacheable,akamai-x-get-extracted-values,akamai-x-feo-trace,x-akamai-logging-mode: verbose"'
  echo "http --headers \"$*\" ${headers[*]}"
  http --headers "$@" "${headers[@]}"
}

aklab() {
    AKFLAGS=(-H "Pragma: akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key, akamai-x-get-ssl-client-session-id, akamai-x-get-true-cache-key, akamai-x-get-request-id" -H "x-akamai-logging-mode: verbose" -vv -H "User-Agent: AU-KSD")
        curl -I ${AKFLAGS[@]} "$*"
}

pull() {
    # Set the root directory for Git repositories
    local git_root="${HOME}/Projects/src/$*"

    # Set the alias for ls based on the OS
    if [[ $OSTYPE == 'linux-gnu' ]]; then
        local ls_alias="ls --color=never"
    else
        local ls_alias="ls"
    fi

    # Loop through each Git repository and pull changes
    while read -r url; do
        local project=""
        local repo=""
        local icon=""

        # Determine the project and repository names based on the Git URL
        if [[  ${url} =~ "bitbucket.org" ]]; then
            icon=" "

            if [[ "${url}" == *"https"* ]]; then
                project=$(echo "${url}" | awk -F/ '{print $4}')
                repo=$(echo "${url}" | awk -F/ '{print $5}' | sed 's/.git//')
            elif [[ "${url}" == *"git@"* ]]; then
                project=$(echo "${url}" | awk -F: '{print $2}' | awk -F/ '{print $1}')
                repo=$(echo "${url}" | awk -F: '{print $2}' | awk -F/ '{print $2}' | sed 's/.git//')
            fi

        elif [[  ${url} =~ "gitlab.nm.cbc.ca" ]]; then
            icon=" "
            git_root="${HOME}/Projects/src/gitlab.nm.cbc.ca"

            if [[ "${url}" == *"https"* ]]; then
                project=$(echo "${url}" | awk -F/ '{print $4}')
                repo=$(echo "${url}" | awk -F/ '{print $5}' | sed 's/.git//')
            elif [[ "${url}" == *"git@"* ]]; then
                project=$(echo "${url}" | awk -F: '{print $2}' | awk -F/ '{print $1}')
                repo=$(echo "${url}" | awk -F: '{print $2}' | awk -F/ '{print $2}' | sed 's/.git//')
            fi

        elif [[ ${url} =~ "github.com" ]]; then
            icon=" "
            git_root="${HOME}/Projects/src/github.com"
            project=$(echo "${url}" | awk -F/ '{print $4}')
            repo=$(echo "${url}" | awk -F/ '{print $5}' | sed 's/.git//')
        fi

        # Change to the Git repository directory and pull changes
        cd "${git_root}"/"${project}"/"${repo}"
        if [[ ! -d .git ]]; then
            printf "%sError: %s/%s/%s is not a Git repository%s\n" ${red} ${git_root} ${project} ${repo} ${reset}
            continue
        fi

        local branch=""
        local url=""
        print $url
        branch=$(git rev-parse --abbrev-ref HEAD)
        url=$(git config --get remote.origin.url)

        output=$(git pull)

        # Calculate the maximum length of the project and repository names
        local max_project_length=${#project}
        local max_repo_length=${#repo}

        # Output the project and repository names with padding
        printf "%s %s %s %s/%s %s" ${cyan} ${icon} ${green} ${project} ${repo} ${reset}

        # Calculate the number of spaces needed to pad the project and repo names
        local project_padding=$((max_project_length - ${#project}))
        local repo_padding=$((max_repo_length - ${#repo}))

        # Output the padding spaces
        printf "%*s" $((project_padding+2)) ""
        printf "%*s" $((repo_padding+2)) "" 

        # Clean the output.
        if [[ "${output}" == *"NOTICE"* ]]; then
            output=""
        elif [[ "${output}" == *"Already up to date."* ]]; then
            output=" "
        fi

        # Output the separator and Git status icon
        printf ' %s──────•%s    %s %s \r%s\n' ${cyan} ${green} ${output} ${reset}

        cd "${git_root}"
    done < <(find "${git_root}" -path "*/.git/config" -exec grep url {} \; | sed 's/url\ =\ //')

    cd "${git_root}"
}

#--------------------------------------------------------------#
# A simple calculator for a simple person.
#--------------------------------------------------------------#
calc() {
    # you will need to escape multiplication (ie: "calc 2 \* 20").
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
                            # └─ default (when `--mathlib` is used) is 20
        if [[ "$result" == *.* ]]; then
            printf "$result" | sed -e 's/^\./0./' \
                -e 's/^-\./-0./' \
                -e 's/0*$//;s/\.$//'
        else
            printf "$result"
                fi
                printf "\n"
}
