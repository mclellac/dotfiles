zsh_detect_kubectx(){
    IS_OPENSHIFT=0

    if [[ ! -f "/etc/resolv.conf" ]]; then
        return
    fi

    if [[ ! $(grep -E '(^domain|^search)' /etc/resolv.conf) =~ ${WORK_DOMAIN} ]]; then
        return
    else
        if type kubectl > /dev/null; then
            current_context=$((kubectl config current-context) 2>&1)
            # cluster_logged_in=$((kubectl config current-context ) 2>&1)
            color='%F{red}'
            # cluster_info=$(kubectl cluster-info 2>&1 | head -n 1)

            if [[ "${current_context}" =~ ^gke(.*) ]]; then
                if [[ "${current_context}" =~ (.*)aws-ocp-failover$ ]]; then
                    kube_env="GOOGLE_AWS_FAILOVER"
                elif [[ ${current_context} =~ ^(.*)us-central1-b_primary$ ]]; then
                    kube_env="GOOGLE_PRIMARY"
                fi
            elif [[ "${current_context}" =~ \/(ocpconsole(.*))\/ ]]; then
                    kube_env="AWS_PROD"
            elif [[ "${current_context}" =~ \/(ose-dev(.*))\/ ]]; then
                    kube_env="DEV"
            fi

            if [[ -n "${kube_env}" ]]; then
                case "${kube_env}" in
                    *GOOGLE_AWS_FAILOVER*)
                        fcolor="%F{33}"
                        platform="%F{4}\ue7b2 %F{7}GKE${fcolor}"
                        current_state="\uf1a0 AWS failover"
                        namespace=$( kubectl config current-context | awk -F_ '{print $2}' )
                    ;;
                    *GOOGLE_PRIMARY*)
                        fcolor="%F{33}"
                        platform="${fcolor}\ue7b2 %F{7}GKE"
                        current_state="${fcolor}\uf1a0 %F{7}primary"
                        namespace=$( kubectl config current-context | awk -F_ '{print $2}' )
                    ;;
                    *AWS_PROD*)
                        IS_OPENSHIFT=1
                        fcolor="%F{214}"
                        platform="%F{214}\uE7B7 %F{7}OpenShift${fcolor}"
                        current_state="%F{214}\uf270  %F{7}prod${fcolor}"
                        namespace=$( kubectl config current-context | awk -F/ '{print $1}' )
                    ;;
                    *OCP_ON_PREM_PROD*)
                        IS_OPENSHIFT=1
                        fcolor="%{$color%}"
                        platform="%{$color%}\uE7B7 %F{7}OpenShift${fcolor}"
                        current_state="%F{red}\uf233  %F{7}prod${fcolor}"
                        namespace=$( kubectl config current-context | awk -F/ '{print $1}' )

                    ;;
                    *DEV*)
                        IS_OPENSHIFT=1
                        fcolor="%{$color%}"
                        platform="%{$color%}\uE7B7 %F{7}OpenShift${fcolor}"
                        current_state="%F{red}\uf233  %F{7}dev${fcolor}"
                        namespace=$( kubectl config current-context | awk -F/ '{print $1}' )
                    ;;
                esac
            fi

            if [[ ${IS_OPENSHIFT} == "1" ]]; then
                if  type oc > /dev/null; then
                    ose_logged_in=$( ( oc get projects ) 2>&1)

                    if [[ $ose_logged_in =~ (^error|^Error|^No) ]]; then
                        echo -n "%F{grey%}\uE7B7"
                    else
                        echo -n "${platform} ${current_state} ${fcolor}\ue5fb %F{7}${namespace}"
                    fi
                fi
            else
                echo -n "${platform} ${current_state} ${fcolor}\ue5fb %F{7}${namespace}"
            fi
        fi
    fi
}

POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="%{%F{008}%}\u250f━•"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%{%F{008}%}┗ %{%F{default}%} '
#POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%{%F{008}%}┗ %{%F{default}%} '
POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=''
POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR=''
POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR=''
POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR=''

# Element 'dir'
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_DIR_HOME_FOREGROUND="004"
POWERLEVEL9K_DIR_HOME_BACKGROUND="clear"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND="004"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND="clear"
POWERLEVEL9K_DIR_DEFAULT_FOREGROUND="000"
POWERLEVEL9K_DIR_DEFAULT_BACKGROUND="clear"

# Element 'vcs'
POWERLEVEL9K_VCS_CLEAN_BACKGROUND='clear'
POWERLEVEL9K_VCS_CLEAN_FOREGROUND='002' # green
POWERLEVEL9K_VCS_MODIFIED_BACKGROUND="clear"
POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND="clear"
POWERLEVEL9K_VCS_MODIFIED_FOREGROUND="003" # yellow
POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND="003" # yellow
POWERLEVEL9K_VCS_STAGED_ICON='\u00b1'
POWERLEVEL9K_VCS_UNTRACKED_ICON='\u25CF'
POWERLEVEL9K_VCS_UNSTAGED_ICON='\u00b1'
POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON='\u2193'
POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON='\u2191'

# Element 'ssh'
POWERLEVEL9K_SSH_BACKGROUND="clear"
POWERLEVEL9K_SSH_FOREGROUND="003"

# Element 'dir_writable'
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="011"
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND="clear"

# custom Kubernetes segment
POWERLEVEL9K_CUSTOM_KUBECTX="zsh_detect_kubectx"
POWERLEVEL9K_CUSTOM_KUBECTX_BACKGROUND="clear"
POWERLEVEL9K_CUSTOM_KUBECTX_FOREGROUND="196"

# Prompt elements
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=('dir' 'dir_writable' 'root_indicator' 'ssh' 'vcs' 'aws') # 'custom_kubectx')
POWERLEVEL9K_DISABLE_RPROMPT=true
