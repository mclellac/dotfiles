#!/bin/bash

export PATH="$HOME/.config/hypr/bin:$HOME/.config/hypr/scripts:$HOME/.config/scripts:$HOME/.config/hypr/bin:$PATH"

# Function to send notifications
notify() {
    notify-send "Hypr Menu" "$1" -t 3000
}

# The main menu function using walker
menu() {
    local prompt="$1"
    local options="$2"
    local extra="$3"
    local preselect="$4"

    read -r -a args <<<"$extra"

    if [[ -n "$preselect" ]]; then
        local index
        index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
        if [[ -n "$index" ]]; then
            args+=("-c" "$(("$index" - 1))")
        fi
    fi

    echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

# Helper function to strip icon from menu selection
get_choice() {
    echo "$1" | sed 's/.*  //'
}

terminal() {
    alacritty --class Hypr -e "$@"
}

present_terminal() {
    hypr-launch-floating-terminal-with-presentation "$1"
}

edit_in_nvim() {
    notify "Editing config file: $1"
    alacritty -e nvim "$1"
}

# --- Sub Menus ---

show_learn_menu() {
    local choice
    choice=$(get_choice "$(menu "Learn" "  Keybindings\n  Hypr\n  Hyprland\n󰣇  Arch\n  Neovim\n󱆃  Bash")")
    case "$choice" in
    "Keybindings") hypr-menu-keybindings ;;
    "Hypr") hypr-launch-webapp "https://learn.omacom.io/2/the-hypr-manual" ;;
    "Hyprland") hypr-launch-webapp "https://wiki.hypr.land/" ;;
    "Arch") hypr-launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
    "Bash") hypr-launch-webapp "https://devhints.io/bash" ;;
    "Neovim") hypr-launch-webapp "https://www.lazyvim.org/keymaps" ;;
    *) show_main_menu ;;
    esac
}

show_style_menu() {
    local choice
    choice=$(get_choice "$(menu "Style" "󰸌  Theme\n  Font\n  Background\n󱄄  Screensaver\n  About")")
    case "$choice" in
    "Theme") show_theme_menu ;;
    "Font") show_font_menu ;;
    "Background") hypr-theme-bg-next ;;
    "Screensaver") edit_in_nvim ~/.config/hypr/branding/screensaver.txt ;;
    "About") edit_in_nvim ~/.config/hypr/branding/about.txt ;;
    *) show_main_menu ;;
    esac
}

show_theme_menu() {
    local theme
    theme=$(get_choice "$(menu "Theme" "$(hypr-theme-list)" "" "$(hypr-theme-current)")")
    if [[ -n "$theme" && "$theme" != "CNCLD" ]]; then
        hypr-theme-set "$theme"
    else
        show_main_menu
    fi
}

show_font_menu() {
    local font
    font=$(get_choice "$(menu "Font" "$(hypr-font-list)" "-w 350" "$(hypr-font-current)")")
    if [[ -n "$font" && "$font" != "CNCLD" ]]; then
        hypr-font-set "$font"
    else
        show_main_menu
    fi
}

show_system_menu() {
    local choice
    choice=$(get_choice "$(menu "System" "  Lock\n󱄄  Screensaver\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown")")
    case "$choice" in
    "Lock") hypr-lock-screen ;;
    "Screensaver") hypr-launch-screensaver force ;;
    "Suspend") systemctl suspend ;;
    "Relaunch") uwsm stop ;;
    "Restart") systemctl reboot ;;
    "Shutdown") systemctl poweroff ;;
    *) show_main_menu ;;
    esac
}

# --- Main Logic ---

show_main_menu() {
    local selection
    selection=$(menu "Go" "󰀻  Apps\n󰧑  Learn\n  Style\n  System")
    if [[ -z "$selection" ]]; then
        exit 0
    fi
    go_to_menu "$selection"
}

go_to_menu() {
    local choice
    choice=$(get_choice "$1")
    case "$choice" in
    "Apps") walker -p "Launch…" ;;
    "Learn") show_learn_menu ;;
    "Style") show_style_menu ;;
    "System") show_system_menu ;;
    *) notify "Invalid option selected: $1" ;;
    esac
}

# --- Entry Point ---

if [[ -n "$1" ]]; then
    # Allow calling sub-menus directly, e.g., `hypr-menu style`
    arg_choice="${1// /}" # remove spaces
    case "${arg_choice,,}" in
        "apps") walker -p "Launch…" ;;
        "learn") show_learn_menu ;;
        "style") show_style_menu ;;
        "theme") show_theme_menu ;;
        "font") show_font_menu ;;
        "system") show_system_menu ;;
        *) go_to_menu "$1" ;;
    esac
else
    show_main_menu
fi
