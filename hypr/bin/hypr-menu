#!/bin/bash

export PATH="$HOME/.config/hypr/bin:$HOME/.config/hypr/scripts:$HOME/.config/scripts:$HOME/.config/hypr/bin:$PATH"

# --- Helper Functions ---

# The main menu function using walker
menu() {
    local prompt="$1"
    local options="$2"
    local extra="$3"
    local preselect="$4"

    read -r -a args <<<"$extra"

    if [[ -n "$preselect" ]]; then
        local index
        index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
        if [[ -n "$index" ]]; then
            args+=("-c" "$(("$index" - 1))")
        fi
    fi

    # The result of this is the user's selection, e.g., "  Keybindings"
    echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

# Helper function to get a clean, lowercase choice from a menu selection
# e.g., "  Keybindings" -> "keybindings"
get_choice() {
    echo "$1" | sed 's/.*  //' | tr '[:upper:]' '[:lower:]'
}

# Function to send notifications
notify() {
    notify-send "Hypr Menu" "$1" -t 3000
}

terminal() {
    alacritty --class Hypr -e "$@"
}

present_terminal() {
    hypr-launch-floating-terminal-with-presentation "$1"
}

edit_in_nvim() {
    notify "Editing config file: $1"
    alacritty -e nvim "$1"
}

install() {
    present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2"
}

install_and_launch() {
    present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2 && setsid gtk-launch $3"
}

install_font() {
    present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm --needed $2 && sleep 2 && hypr-font-set '$3'"
}

aur_install() {
    present_terminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2"
}

aur_install_and_launch() {
    present_terminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2 && setsid gtk-launch $3"
}

# --- Sub-Menu Functions ---

show_learn_menu() {
    local selection
    selection=$(menu "Learn" "  Keybindings\n  Hypr\n  Hyprland\n󰣇  Arch\n  Neovim\n󱆃  Bash")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "keybindings") hypr-menu-keybindings ;;
    "hypr") hypr-launch-webapp "https://learn.omacom.io/2/the-hypr-manual" ;;
    "hyprland") hypr-launch-webapp "https://wiki.hypr.land/" ;;
    "arch") hypr-launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
    "bash") hypr-launch-webapp "https://devhints.io/bash" ;;
    "neovim") hypr-launch-webapp "https://www.lazyvim.org/keymaps" ;;
    *) show_main_menu ;;
    esac
}

show_style_menu() {
    local selection
    selection=$(menu "Style" "󰸌  Theme\n  Font\n  Background\n󱄄  Screensaver\n  About")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "theme") show_theme_menu ;;
    "font") show_font_menu ;;
    "background") hypr-theme-bg-next ;;
    "screensaver") edit_in_nvim ~/.config/hypr/branding/screensaver.txt ;;
    "about") edit_in_nvim ~/.config/hypr/branding/about.txt ;;
    *) show_main_menu ;;
    esac
}

show_theme_menu() {
    local theme
    theme=$(menu "Theme" "$(hypr-theme-list)" "" "$(hypr-theme-current)")
    if [[ -n "$theme" && "$theme" != "CNCLD" ]]; then
        hypr-theme-set "$theme"
    else
        show_style_menu
    fi
}

show_font_menu() {
    local font
    font=$(menu "Font" "$(hypr-font-list)" "-w 350" "$(hypr-font-current)")
    if [[ -n "$font" && "$font" != "CNCLD" ]]; then
        hypr-font-set "$font"
    else
        show_style_menu
    fi
}

show_capture_menu() {
    local selection
    selection=$(menu "Capture" "  Screenshot\n  Screenrecord\n󰃉  Color")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "screenshot") show_screenshot_menu ;;
    "screenrecord") show_screenrecord_menu ;;
    "color") pkill hyprpicker || hyprpicker -a ;;
    *) show_main_menu ;;
    esac
}

show_screenshot_menu() {
    local selection
    selection=$(menu "Screenshot" "  Region\n  Window\n  Display")
    [[ -z "$selection" ]] && show_capture_menu && return

    case $(get_choice "$selection") in
    "region") hypr-cmd-screenshot ;;
    "window") hypr-cmd-screenshot window ;;
    "display") hypr-cmd-screenshot output ;;
    *) show_capture_menu ;;
    esac
}

show_screenrecord_menu() {
    local selection
    selection=$(menu "Screenrecord" "  Region\n  Display")
    [[ -z "$selection" ]] && show_capture_menu && return

    case $(get_choice "$selection") in
    "region") hypr-cmd-screenrecord ;;
    "display") hypr-cmd-screenrecord output ;;
    *) show_capture_menu ;;
    esac
}

show_toggle_menu() {
    local selection
    selection=$(menu "Toggle" "󱄄  Screensaver\n󰔎  Nightlight\n󱫖  Idle Lock\n󰍜  Top Bar")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "screensaver") hypr-toggle-screensaver ;;
    "nightlight") hypr-toggle-nightlight ;;
    "idle lock") hypr-toggle-idle ;;
    "top bar") hypr-toggle-waybar ;;
    *) show_main_menu ;;
    esac
}

show_setup_menu() {
    local options="  Audio\n  Wifi\n󰂯  Bluetooth\n󱐋  Power Profile\n󰍹  Monitors"
    [ -f ~/.config/hypr/bindings.conf ] && options="$options\n  Keybindings"
    [ -f ~/.config/hypr/input.conf ] && options="$options\n  Input"
    options="$options\n󰱔  DNS\n  Config\n󰈷  Fingerprint\n  Fido2"
    local selection
    selection=$(menu "Setup" "$options")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "audio") alacritty --class=Wiremix -e wiremix ;;
    "wifi")
        rfkill unblock wifi
        alacritty --class=Impala -e impala
        ;;
    "bluetooth")
        rfkill unblock bluetooth
        blueberry
        ;;
    "power profile") show_setup_power_menu ;;
    "monitors") edit_in_nvim ~/.config/hypr/monitors.conf ;;
    "keybindings") edit_in_nvim ~/.config/hypr/bindings.conf ;;
    "input") edit_in_nvim ~/.config/hypr/input.conf ;;
    "dns") present_terminal hypr-setup-dns ;;
    "config") show_setup_config_menu ;;
    "fingerprint") present_terminal hypr-setup-fingerprint ;;
    "fido2") present_terminal hypr-setup-fido2 ;;
    *) show_main_menu ;;
    esac
}

show_setup_power_menu() {
    local profile
    profile=$(menu "Power Profile" "$(hypr-powerprofiles-list)" "" "$(powerprofilesctl get)")
    if [[ -n "$profile" && "$profile" != "CNCLD" ]]; then
        powerprofilesctl set "$profile"
    else
        show_setup_menu
    fi
}

show_setup_config_menu() {
    local selection
    selection=$(menu "Setup" "  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar\n󰞅  XCompose")
    [[ -z "$selection" ]] && show_setup_menu && return

    case $(get_choice "$selection") in
    "hyprland") edit_in_nvim ~/.config/hypr/hyprland.conf ;;
    "hypridle") edit_in_nvim ~/.config/hypr/hypridle.conf && hypr-restart-hypridle ;;
    "hyprlock") edit_in_nvim ~/.config/hypr/hyprlock.conf ;;
    "hyprsunset") edit_in_nvim ~/.config/hypr/hyprsunset.conf && hypr-restart-hyprsunset ;;
    "swayosd") edit_in_nvim ~/.config/swayosd/config.toml && hypr-restart-swayosd ;;
    "walker") edit_in_nvim ~/.config/walker/config.toml && hypr-restart-walker ;;
    "waybar") edit_in_nvim ~/.config/waybar/config.jsonc && hypr-restart-waybar ;;
    "xcompose") edit_in_nvim ~/.XCompose && hypr-restart-xcompose ;;
    *) show_setup_menu ;;
    esac
}

show_install_menu() {
    local selection
    selection=$(menu "Install" "󰣇  Package\n󰣇  AUR\n  Web App\n  TUI\n  Service\n  Style\n󰵮  Development\n  Editor\n󱚤  AI\n  Gaming")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "package") terminal hypr-pkg-install ;;
    "aur") terminal hypr-pkg-aur-install ;;
    "web app") present_terminal hypr-webapp-install ;;
    "tui") present_terminal hypr-tui-install ;;
    "service") show_install_service_menu ;;
    "style") show_install_style_menu ;;
    "development") show_install_development_menu ;;
    "editor") show_install_editor_menu ;;
    "ai") show_install_ai_menu ;;
    "gaming") show_install_gaming_menu ;;
    *) show_main_menu ;;
    esac
}

show_install_service_menu() {
    local selection
    selection=$(menu "Install" "  Dropbox\n  Tailscale\n󰟵  Bitwarden")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "dropbox") present_terminal hypr-install-dropbox ;;
    "tailscale") present_terminal hypr-install-tailscale ;;
    "bitwarden") install_and_launch "Bitwarden" "bitwarden bitwarden-cli" "bitwarden" ;;
    *) show_install_menu ;;
    esac
}

show_install_editor_menu() {
    local selection
    selection=$(menu "Install" "  VSCode\n  Cursor\n  Zed\n  Sublime Text\n  Helix\n  Emacs")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "vscode") install_and_launch "VSCode" "visual-studio-code-bin" "code" ;;
    "cursor") install_and_launch "Cursor" "cursor-bin" "cursor" ;;
    "zed") install_and_launch "Zed" "zed" "dev.zed.Zed" ;;
    "sublime text") aur_install_and_launch "Sublime Text" "sublime-text-4" "sublime_text" ;;
    "helix") install "Helix" "helix" ;;
    "emacs") install "Emacs" "emacs-wayland" && systemctl --user enable --now emacs.service ;;
    *) show_install_menu ;;
    esac
}

show_install_ai_menu() {
    ollama_pkg=$(
        (command -v nvidia-smi &>/dev/null && echo ollama-cuda) ||
            (command -v rocminfo &>/dev/null && echo ollama-rocm) ||
            echo ollama
    )
    local selection
    selection=$(menu "Install" "󱚤  Claude Code\n󱚤  Gemini\n󱚤  OpenAI Codex [AUR]\n󱚤  LM Studio\n󱚤  Ollama\n󱚤  Crush\n󱚤  opencode")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "claude code") install "Claude Code" "claude-code" ;;
    "openai codex [aur]") aur_install "OpenAI Codex" "openai-codex-bin" ;;
    "gemini") install "Gemini" "gemini-cli" ;;
    "lm studio") install "LM Studio" "lmstudio" ;;
    "ollama") install "Ollama" "$ollama_pkg" ;;
    "crush") install "Crush" "crush-bin" ;;
    "opencode") install "opencode" "opencode-bin" ;;
    *) show_install_menu ;;
    esac
}

show_install_gaming_menu() {
    local selection
    selection=$(menu "Install" "  Steam\n  RetroArch [AUR]\n󰍳  Minecraft")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "steam") present_terminal hypr-install-steam ;;
    "retroarch [aur]") aur_install_and_launch "RetroArch" "retroarch retroarch-assets libretro libretro-fbneo" "com.libretro.RetroArch.desktop" ;;
    "minecraft") install_and_launch "Minecraft" "minecraft-launcher" "minecraft-launcher" ;;
    *) show_install_menu ;;
    esac
}

show_install_style_menu() {
    local selection
    selection=$(menu "Install" "󰸌  Theme\n  Background\n  Font")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "theme") present_terminal hypr-theme-install ;;
    "background") nautilus ~/.config/hypr/theme/backgrounds ;;
    "font") show_install_font_menu ;;
    *) show_install_menu ;;
    esac
}

show_install_font_menu() {
    local selection
    selection=$(menu "Install" "  Meslo LG Mono\n  Fira Code\n  Victor Code\n  Bistream Vera Mono" "-w 350")
    [[ -z "$selection" ]] && show_install_style_menu && return

    case $(get_choice "$selection") in
    "meslo lg mono") install_font "Meslo LG Mono" "ttf-meslo-nerd" "MesloLGL Nerd Font" ;;
    "fira code") install_font "Fira Code" "ttf-firacode-nerd" "FiraCode Nerd Font" ;;
    "victor code") install_font "Victor Code" "ttf-victor-mono-nerd" "VictorMono Nerd Font" ;;
    "bistream vera mono") install_font "Bistream Vera Code" "ttf-bitstream-vera-mono-nerd" "BitstromWera Nerd Font" ;;
    *) show_install_style_menu ;;
    esac
}

show_install_development_menu() {
    local selection
    selection=$(menu "Install" "󰫏  Ruby on Rails\n  Docker DB\n  JavaScript\n  Go\n  PHP\n  Python\n  Elixir\n  Zig\n  Rust\n  Java\n  .NET\n  OCaml")
    [[ -z "$selection" ]] && show_install_menu && return

    case $(get_choice "$selection") in
    "ruby on rails") present_terminal "hypr-install-dev-env ruby" ;;
    "docker db") present_terminal hypr-install-docker-dbs ;;
    "javascript") show_install_javascript_menu ;;
    "go") present_terminal "hypr-install-dev-env go" ;;
    "php") show_install_php_menu ;;
    "python") present_terminal "hypr-install-dev-env python" ;;
    "elixir") show_install_elixir_menu ;;
    "zig") present_terminal "hypr-install-dev-env zig" ;;
    "rust") present_terminal "hypr-install-dev-env rust" ;;
    "java") present_terminal "hypr-install-dev-env java" ;;
    ".net") present_terminal "hypr-install-dev-env dotnet" ;;
    "ocaml") present_terminal "hypr-install-dev-env ocaml" ;;
    *) show_install_menu ;;
    esac
}

show_install_javascript_menu() {
    local selection
    selection=$(menu "Install" "  Node.js\n  Bun\n  Deno")
    [[ -z "$selection" ]] && show_install_development_menu && return

    case $(get_choice "$selection") in
    "node.js") present_terminal "hypr-install-dev-env node" ;;
    "bun") present_terminal "hypr-install-dev-env bun" ;;
    "deno") present_terminal "hypr-install-dev-env deno" ;;
    *) show_install_development_menu ;;
    esac
}

show_install_php_menu() {
    local selection
    selection=$(menu "Install" "  PHP\n  Laravel\n  Symfony")
    [[ -z "$selection" ]] && show_install_development_menu && return

    case $(get_choice "$selection") in
    "php") present_terminal "hypr-install-dev-env php" ;;
    "laravel") present_terminal "hypr-install-dev-env laravel" ;;
    "symfony") present_terminal "hypr-install-dev-env symfony" ;;
    *) show_install_development_menu ;;
    esac
}

show_install_elixir_menu() {
    local selection
    selection=$(menu "Install" "  Elixir\n  Phoenix")
    [[ -z "$selection" ]] && show_install_development_menu && return

    case $(get_choice "$selection") in
    "elixir") present_terminal "hypr-install-dev-env elixir" ;;
    "phoenix") present_terminal "hypr-install-dev-env phoenix" ;;
    *) show_install_development_menu ;;
    esac
}

show_remove_menu() {
    local selection
    selection=$(menu "Remove" "󰣇  Package\n  Web App\n  TUI\n󰸌  Theme\n󰈷  Fingerprint\n  Fido2")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "package") terminal hypr-pkg-remove ;;
    "web app") present_terminal hypr-webapp-remove ;;
    "tui") present_terminal hypr-tui-remove ;;
    "theme") present_terminal hypr-theme-remove ;;
    "fingerprint") present_terminal "hypr-setup-fingerprint --remove" ;;
    "fido2") present_terminal "hypr-setup-fido2 --remove" ;;
    *) show_main_menu ;;
    esac
}

show_update_menu() {
    local selection
    selection=$(menu "Update" " Hypr\n  Config\n󰸌  Themes\n  Process\n󰇅  Hardware\n  Timezone")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "hypr") present_terminal hypr-update ;;
    "config") show_update_config_menu ;;
    "themes") present_terminal hypr-theme-update ;;
    "process") show_update_process_menu ;;
    "hardware") show_update_hardware_menu ;;
    "timezone") hypr-cmd-tzupdate ;;
    *) show_main_menu ;;
    esac
}

show_update_process_menu() {
    local selection
    selection=$(menu "Restart" "  Hypridle\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar")
    [[ -z "$selection" ]] && show_update_menu && return

    case $(get_choice "$selection") in
    "hypridle") hypr-restart-hypridle ;;
    "hyprsunset") hypr-restart-hyprsunset ;;
    "swayosd") hypr-restart-swayosd ;;
    "walker") hypr-restart-walker ;;
    "waybar") hypr-restart-waybar ;;
    *) show_update_menu ;;
    esac
}

show_update_config_menu() {
    local selection
    selection=$(menu "Use default config" "  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n󱣴  Plymouth\n  Swayosd\n󰌧  Walker\n󰍜  Waybar")
    [[ -z "$selection" ]] && show_update_menu && return

    case $(get_choice "$selection") in
    "hyprland") present_terminal hypr-refresh-hyprland ;;
    "hypridle") present_terminal hypr-refresh-hypridle ;;
    "hyprlock") present_terminal hypr-refresh-hyprlock ;;
    "hyprsunset") present_terminal hypr-refresh-hyprsunset ;;
    "plymouth") present_terminal hypr-refresh-plymouth ;;
    "swayosd") present_terminal hypr-refresh-swayosd ;;
    "walker") present_terminal hypr-refresh-walker ;;
    "waybar") present_terminal hypr-refresh-waybar ;;
    *) show_update_menu ;;
    esac
}

show_update_hardware_menu() {
    local selection
    selection=$(menu "Restart" "󱚾  Wi-Fi\n󰂯  Bluetooth")
    [[ -z "$selection" ]] && show_update_menu && return

    case $(get_choice "$selection") in
    "wi-fi") present_terminal hypr-restart-wifi ;;
    "bluetooth") present_terminal hypr-restart-bluetooth ;;
    *) show_update_menu ;;
    esac
}

show_system_menu() {
    local selection
    selection=$(menu "System" "  Lock\n󱄄  Screensaver\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown")
    [[ -z "$selection" ]] && show_main_menu && return

    case $(get_choice "$selection") in
    "lock") hypr-lock-screen ;;
    "screensaver") hypr-launch-screensaver force ;;
    "suspend") systemctl suspend ;;
    "relaunch") uwsm stop ;;
    "restart") systemctl reboot ;;
    "shutdown") systemctl poweroff ;;
    *) show_main_menu ;;
    esac
}

show_main_menu() {
    local selection
    selection=$(menu "Go" "󰀻  Apps\n󰧑  Learn\n  Capture\n󰔎  Toggle\n  Style\n  Setup\n󰉉  Install\n󰭌  Remove\n  Update\n  About\n  System")
    [[ -z "$selection" ]] && exit 0
    go_to_menu "$selection"
}

go_to_menu() {
    # The `go_to_menu` function is now the main router.
    # It takes the raw selection from the main menu and routes to the correct sub-menu.
    # The sub-menus themselves handle their own logic and don't call back to here,
    # which prevents the recursive confusion that was happening before.
    local choice
    choice=$(get_choice "$1")
    case "$choice" in
    "apps") walker -p "Launch…" ;;
    "learn") show_learn_menu ;;
    "capture") show_capture_menu ;;
    "toggle") show_toggle_menu ;;
    "style") show_style_menu ;;
    "setup") show_setup_menu ;;
    "install") show_install_menu ;;
    "remove") show_remove_menu ;;
    "update") show_update_menu ;;
    "about") alacritty --class Hypr -o font.size=9 -e bash -c 'fastfetch; read -n 1 -s' ;;
    "system") show_system_menu ;;
    *) notify "Invalid main menu option: $1" ;;
    esac
}

# --- Entry Point ---

if [[ -n "$1" ]]; then
    # Allow calling sub-menus directly, e.g., `hypr-menu style`
    # This makes the script more flexible.
    arg_choice=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$arg_choice" in
        "apps") walker -p "Launch…" ;;
        "learn") show_learn_menu ;;
        "style") show_style_menu ;;
        "capture") show_capture_menu ;;
        "toggle") show_toggle_menu ;;
        "setup") show_setup_menu ;;
        "install") show_install_menu ;;
        "remove") show_remove_menu ;;
        "update") show_update_menu ;;
        "system") show_system_menu ;;
        "theme") show_theme_menu ;;
        "font") show_font_menu ;;
        *) notify "Unknown command: $1" ;;
    esac
else
    # No arguments, show the main menu.
    show_main_menu
fi
